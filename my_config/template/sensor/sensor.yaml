  - sensor:
    # - name: Bus 22 to Work
    #   state: "{{state_attr('sensor.bus_to_work','22')[0]}}"

    # - name: Bus 801 to Work
    #   state: "{{state_attr('sensor.bus_to_work','801')[0]}}"

    # - name: Bus to Work Next
    #   state: "{{((as_timestamp(states('sensor.bus_to_work')) - as_timestamp(now()))/60)|round(0,'common')}}"

    # - name: Bus to Home Next
    #   state: "{{((as_timestamp(states('sensor.bus_to_home_from_koptevo')) - as_timestamp(now()))/60)|round(0,'common')}}"

    # - name: Humidity Delta K
    #   unique_id: humidity_delta_k
    #   state: "{{ ( states('sensor.0x00158d0006b1c7bc_humidity')|float(0) - states('sensor.0x00158d0001e586af_humidity')|float(0) )|round(2) }}"
    #   device_class: humidity
    #   unit_of_measurement: '%'

    # - name: New Year Countdown
    #   unique_id: new_year_countdown
    #   state: "{{as_datetime(as_timestamp((now().year+1)|string + '-01-01')-as_timestamp(now())).strftime('%d дней %H часов %M минут')}}"
    #   icon: mdi:calendar-clock
    - name: Curtain Position S
      unique_id: curtain_position_s
      state: "{{ state_attr('cover.1778091091590258688_motor','current_position')}}"
      icon: mdi:curtains

    - name: Curtain Position MB
      unique_id: curtain_position_mb
      state: "{{ state_attr('cover.1778456713918824448_motor','current_position')}}"
      icon: mdi:curtains
      
    # - name: LUMI OTA List
    #   unique_id: lumi_ota_list
    #   state: "OK"

    # - name: Washer B
    #   unique_id: sensor_washer_b
    #   state: >-
    #     {% if states('sensor.sonoff_pow_r2_1_power')|float(0) == 0 %}
    #       Off
    #     {% elif (states('sensor.sonoff_pow_r2_1_power')|float(0) > 0 and states('sensor.sonoff_pow_r2_1_power')|float(0) <= 0 ) %}
    #       Standby
    #     {% else %}
    #       On
    #     {% endif %}
    #   icon: >
    #     {% if states('sensor.sonoff_pow_r2_1_power')|float(0) == 0 %}
    #       mdi:washing-machine-off
    #     {% elif (states('sensor.sonoff_pow_r2_1_power')|float(0) > 0 and states('sensor.sonoff_pow_r2_1_power')|float(0) <= 0 ) %}
    #       mdi:washing-machine-alert
    #     {% else %}
    #       mdi:washing-machine
    #     {% endif %}

    # - name: Active Lights
    #   unique_id: active_lights
    #   icon: mdi:lightbulb-on
    #   unit_of_measurement: 'ea'
    #   state: "{{ states.light | selectattr ('state', 'equalto', 'on') | list | count }}"

    # - name: Active Switches
    #   unique_id: active_switches
    #   icon: mdi:toggle-switch
    #   unit_of_measurement: 'ea'
    #   state: "{{ states.switch | selectattr ('state', 'equalto', 'on') | list | count }}"

    # - name: Cert Validity Left
    #   state: "{{((as_timestamp(states('sensor.cert_expiry_main'),0)+3*60*60 - as_timestamp(now()))|int(0)/(24*60*60))|int(0)}}"
    #   unit_of_measurement: 'd'
    #   icon: >-
    #     {% if states('sensor.cert_validity_left') | int(0) > 15 %}
    #       mdi:certificate
    #     {% else %}
    #       mdi:certificate-outline
    #     {% endif %}

    # - name: PC S Usage
    #   unique_id: pc_s_usage
    #   state: "{{(states('sensor.pc_s_stats')|float(0)*3600)|timestamp_custom('%H:%M:%S',false, 0)}}"
    #   icon: mdi:progress-clock

    # - name: Stove Temperature Median
    #   state: "{{ state_attr('sensor.stove_temperature_stats', 'median')|float(0) }}"
    #   unit_of_measurement: "°C"
    #   device_class: temperature

    # - name: Next Sunrise
    #   unique_id: next_sunrise
    #   state: "{{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom('%H:%M:%S',true,0) }}"
    #   icon: mdi:weather-sunset-up

    # - name: Next Sunset
    #   unique_id: next_sunset
    #   state: "{{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom('%H:%M:%S',true,0) }}"
    #   icon: mdi:weather-sunset-down

    # - name: Temperature Min Out
    #   state: "{{ state_attr('sensor.out_temperature_stats', 'min_value')|float(0) }}"
    #   unit_of_measurement: "°C"
    #   device_class: temperature

    # - name: Temperature Max Out
    #   state: "{{ state_attr('sensor.out_temperature_stats', 'max_value')|float(0) }}"
    #   unit_of_measurement: "°C"
    #   device_class: temperature

    # - name: Abs Humidity T
    #   unique_id: abs_humidity_t
    #   state: >-
    #     {% set h, t = states('sensor.0x00158d0001e58754_humidity') | float(0), states('sensor.0x00158d0001e58754_temperature') %}
    #     {% if not h or t == 'unknown' -%}
    #     'unknown'
    #     {%- else %}
    #     {% set t = t | float(0) %}
    #     {{ (h*6.112*2.1674*e**((t*17.67)/(t+243.5))/(t+273.15))|round(2, 'common') }}
    #     {% endif %}
    #   unit_of_measurement: "g/m³"
    #   icon: mdi:water-percent

    # - name: Vova GPS Last Update
    #   state: "{{as_timestamp(state_attr('device_tracker.life360_vova_tsymbal','last_seen')) | timestamp_custom('%Y-%m-%d %H:%M:%S', true, default) }}"
    #   icon: mdi:crosshairs-question
    #   attributes:
    #     delta: "{{states('input_number.vova_gps_delta')}}"

    # - name: Vova GPS Delta
    #   state: "{{states('input_number.vova_gps_delta')}}"
    #   icon: mdi:crosshairs-question
    #   unit_of_measurement: "m"

    # restarts_per_day:
    # - name: Qty Of Restart
    #   state: "{{states('counter.restart_counter')|int(0)}}"
    #   unit_of_measurement: 'ea'

    - name: Config Line Count Ratio
      unique_id: config_line_count_ratio
      state: "{{'NA' if states('sensor.system_config_line_count')==0 else (states('sensor.system_config_line_count_code')|int(0) / states('sensor.system_config_line_count')|int(0) * 100) | round(0, 'common') }}"
      unit_of_measurement: "%"
      icon: mdi:brightness-percent
      availability: "{{states('sensor.system_config_line_count')|int(0) != 0 }}"

    - name: Oven Target Temperature
      unique_id: oven_target_temperature
      state: "{{ states('input_select.oven_target_temperature')|int(0)}}"
      device_class: temperature
      unit_of_measurement: "°C"

    # - name: GDrive Backup Size in HA
    #   unique_id: gdrive_backup_size_in_ha
    #   icon: mdi:file-eye
    #   state: "{{state_attr('sensor.backup_state','size_in_home_assistant')}}"

    # - name: GDrive Backup Size
    #   unique_id: gdrive_backup_size
    #   icon: mdi:file-eye-outline
    #   state: "{{state_attr('sensor.backup_state','size_in_google_drive')}}"

    # - name: GDrive Last Backup Name And Size
    #   icon: mdi:backup-restore
    #   state: >-
    #     {%- set upt=((as_timestamp(now())|int(0)-as_timestamp(states('sensor.uptime'))|int(0)) / 60 )|int(0) %}
    #     {%- set found=namespace(snapshot=None,time=0) %}
    #     {%- if upt > 0 %}
    #       {%-for snapshot in state_attr('sensor.backup_state', 'snapshots') %}
    #         {%-if as_timestamp(snapshot.date) > found.time and snapshot.state == "Backed Up" %}
    #           {%- set found.time = as_timestamp(snapshot.date) %}
    #           {%- set found.snapshot = snapshot %}
    #         {%-endif %}
    #       {%-endfor %}
    #       {%- if upt > 0 %}
    #         {{ found.snapshot.name }} ({{ found.snapshot.size}})
    #       {%- else %}

    #         Loading
    #       {%- endif %}
    #     {%- else %}Unknown{%endif%}

    # - name: Git Stars
    #   state: "{{state_attr('sensor.myconfig','stargazers')|int(0)}}"
    #   icon: mdi:star

    # - name: Git Views
    #   state: "{{state_attr('sensor.myconfig','views')|int(0)}}"
    #   icon: mdi:account-multiple

    # - name: Git Views Unique
    #   state: "{{state_attr('sensor.myconfig','views_unique')|int(0)}}"
    #   icon: mdi:account-check

    # - name: GW3 NonResposing Devices
    #   state: >-
    #     {%- macro dev_list() -%}
    #     {%- for state in states.sensor -%}
    #     {%- if states('sensor.ha_uptime')|int(0) > 0 and state.entity_id.endswith("_zigbee") and (as_timestamp(now())|int(0)-as_timestamp(state.state)|int(0) > 3*60*60) -%}
    #     X
    #     {%-endif-%}
    #     {%-endfor-%}
    #     {%-endmacro-%}
    #     {%- if dev_list()[0] == "X" -%}
    #     {{dev_list()|list|length }}
    #     {%- else -%}
    #     0
    #     {%- endif -%}
    #   attributes:
    #     list: >-
    #       {%-for state in states.sensor
    #       if states('sensor.ha_uptime')|int(0) > 0 and state.entity_id.endswith("_zigbee") and (as_timestamp(now())-as_timestamp(state.state)|int(0) > 3*60*60) %}
    #       {{state.attributes.name}}: {% if state.state =="unknown"%}NAN{%else%}{{((as_timestamp(now())|int(0)-as_timestamp(state.state))|int(0)/60)|int(0)}}min{%-endif-%}{%- if not loop.last -%}, {%-endif%}
    #       {%-endfor-%}
    #   icon: mdi:zigbee
    #   unit_of_measurement: "ea"

    # - name: Automations Running
    #   state: >-
    #     {% set thrsh = states('input_number.automation_current_threshold')|int(0) %}
    #     {{states.automation| selectattr('attributes.current', 'defined')|selectattr('attributes.current','>=', thrsh ) | map(attribute='entity_id') | list  | count }}
    #   attributes:
    #     list: >-
    #       {% set thrsh = states('input_number.automation_current_threshold')|int(0) %}
    #       {{states.automation| selectattr('attributes.current', 'defined')|selectattr('attributes.current','>=', thrsh ) | map(attribute='entity_id') | list  | join('\n') }}
    #   unit_of_measurement: 'ea'
    #   icon: mdi:robot

    # - name: GW3 MsgMissed
    #   state: >-
    #     {% set thrsh = states('input_number.msg_missed_threshold')|int(0) %}
    #     {{ states.sensor | selectattr('attributes.msg_missed', 'defined') | selectattr('attributes.integration','eq','gw3')| selectattr('attributes.msg_missed','>', thrsh ) | list  | length  }}
    #   attributes:
    #     list: >-
    #       {% set thrsh = states('input_number.msg_missed_threshold')|int(0) %}
    #       {{ states.sensor | selectattr('attributes.msg_missed', 'defined') | selectattr('attributes.integration','eq','gw3')| selectattr('attributes.msg_missed','>', thrsh ) | map(attribute='attributes.name')| list  | join(', ') }}
    #   icon: mdi:zigbee
    #   unit_of_measurement: "ea"

    # - name: Addons Update Available
    #   unique_id: addons_update_available
    #   state: >-
    #     {%- macro dev_list() -%}
    #     {%- for state in states.binary_sensor -%}
    #     {%- if state.entity_id.endswith("_update_available") and ( state.state == 'on') -%}
    #     X
    #     {%-endif-%}
    #     {%-endfor-%}
    #     {%-endmacro-%}
    #     {%- if dev_list()[0] == "X" -%}
    #     {{dev_list()|list|length }}
    #     {%- else -%}
    #     0
    #     {%- endif -%}
    #   attributes:
    #     list: >-
    #       {%-for state in states.binary_sensor
    #       if state.entity_id.endswith("_update_available") and ( state.state == 'on') %}
    #       {{state.name}}{%- if not loop.last -%}, {%-endif%}
    #       {%-endfor-%}
    #   unit_of_measurement: "ea"

# - trigger:
#     - trigger: state
#       entity_id: sensor.qiwi_usd_rate
#       for:
#         minutes: 3
#     - trigger: homeassistant
#       event: start
#     - trigger: event
#       event_type: event_template_reloaded
#   sensor:
#     - name: QIWI USD Rate Filtered
#       unique_id: qiwi_usd_rate_filtered
#       state: "{{ states('sensor.qiwi_usd_rate')|float(0) }}"
#       unit_of_measurement: "RUB"
#       icon: mdi:currency-usd

# - trigger:
#     - trigger: state
#       entity_id: sensor.qiwi_yen_rate
#       for:
#         minutes: 3
#     - trigger: homeassistant
#       event: start
#     - trigger: event
#       event_type: event_template_reloaded
#   sensor:
#     - name: QIWI YEN Rate Filtered
#       state: "{{ states('sensor.qiwi_yen_rate')|float(0) }}"
#       unit_of_measurement: "RUB"
#       icon: mdi:currency-cny


  - trigger:
      - trigger: event
        event_type: calendar_holiday_event_list_updated
    sensor:
      - name: calendar_holiday_events
        unique_id: calendar_holiday_events
        state: "{{ (state_attr('input_select.calendar_holiday_events_list', 'options') | join('|') | replace ('Нет событий','')).split('|') | select('ne', '') | unique | list | count }}"
        icon: mdi:calendar
        attributes:
          events: "{{ state_attr('input_select.calendar_holiday_events_list', 'options') | list }}"



  - trigger:
      - trigger: event
        event_type: calendar_event_list_updated
      - trigger: state
        entity_id: sensor.calendar_events
    sensor:
      - name: calendar_events
        unique_id: calendar_events
        state: "{{ (state_attr('input_select.calendar_events_list', 'options') | join('|') | replace ('Нет событий','')).split('|') | select('ne', '') | unique | list | count }}"
        attributes:
          events: >-
            {% if this.state | int(0) > 0 %}
              {{ (state_attr('input_select.calendar_events_list', 'options') | join('|') | replace ('Нет событий','')).split('|') | select('ne', '') | unique | list }}
            {% else %}
              ['Нет событий']
            {% endif %}
        icon: "{{ (this.state | int(0) > 0) | iif('mdi:calendar-star', 'mdi:calendar-blank') }}"
      

  - trigger:
      - trigger: state
        entity_id: input_select.tts_audio_effect
    sensor:
      - name: tts_audio_effect
        unique_id: tts_audio_effect
        state: >-
          {%- if is_state('input_select.tts_audio_effect','За стеной') %}
            behind_the_wall
          {%- elif is_state('input_select.tts_audio_effect','Хомяк') %}
            hamster
          {%- elif is_state('input_select.tts_audio_effect','Мегафон') %}
            megaphone
          {%- elif is_state('input_select.tts_audio_effect','Питч') %}
            pitch_down
          {%- elif is_state('input_select.tts_audio_effect','Психоделика') %}
            psychodelic
          {%- elif is_state('input_select.tts_audio_effect','Пульсация') %}
            pulse
          {%- elif is_state('input_select.tts_audio_effect','Вокзал') %}
            train_announce
          {%- else %}
            none
          {%- endif %}

  - trigger:
      - trigger: time_pattern
        seconds: "/30"
      - trigger: homeassistant
        event: start
      - trigger: event
        event_type: event_template_reloaded
      - trigger: event
        event_type: automation_reloaded
    sensor:
    - name: PC S Usage
      unique_id: pc_s_usage
      state: "{{(states('sensor.pc_s_stats')|float(0)*3600)|timestamp_custom('%H:%M:%S',false, 0)}}"
      icon: mdi:progress-clock

    - name: Breather Set Speed V
      unique_id: breather_set_speed_v
      state: >
        {% set low_limit = states('input_number.co2_low_limit')|int(0) %}
        {% set cur_co2 = states('sensor.esp32_node_v_co2')|int(0) %}
        {%- set datanames = namespace(alert_levels=[low_limit, low_limit +100, low_limit +200, low_limit +300]) -%}
        {{ datanames.alert_levels | select( 'le', cur_co2) | list | count* 25 }}
      icon: >
        {% set spd = states('sensor.breather_set_speed_v')|int(0) %}
        {% if spd == 0 %}
        mdi:fan-off
        {% elif spd == 25 %}
        mdi:fan-speed-1
        {% elif spd == 50 %}
        mdi:fan-speed-2
        {% elif spd == 75 %}
        mdi:fan-speed-3
        {% elif spd == 100 %}
        mdi:fan-plus
        {% endif %}

    - name: Breather Set Speed MB
      unique_id: breather_set_speed_mb
      state: >-
        {% set low_limit = states('input_number.co2_low_limit')|int(0) %}
        {% set cur_co2 = states('sensor.esp32_node_mb_co2')|int(0) %}
        {%- set datanames = namespace(alert_levels=[low_limit, low_limit +100, low_limit +200, low_limit +300]) -%}
        {{ datanames.alert_levels | select( 'le', cur_co2) | list | count * 25 }}
      icon: >
        {% set spd = states('sensor.breather_set_speed_mb')|int(0) %}
        {% if spd == 0 %}
        mdi:fan-off
        {% elif spd == 25 %}
        mdi:fan-speed-1
        {% elif spd == 50 %}
        mdi:fan-speed-2
        {% elif spd == 75 %}
        mdi:fan-speed-3
        {% elif spd == 100 %}
        mdi:fan-plus
        {% endif %}

    - name: Breather Set Speed S
      unique_id: breather_set_speed_s
      state: >-
        {% set low_limit = states('input_number.co2_low_limit')|int(0) %}
        {% set cur_co2 = states('sensor.esp32_node_s_co2')|int(0) %}
        {%- set datanames = namespace(alert_levels=[low_limit, low_limit +100, low_limit +200, low_limit +300]) -%}
        {{ datanames.alert_levels | select( 'le', cur_co2) | list | count * 25 }}
      icon: >
        {% set spd = states('sensor.breather_set_speed_s')|int(0) %}
        {% if spd == 0 %}
        mdi:fan-off
        {% elif spd == 25 %}
        mdi:fan-speed-1
        {% elif spd == 50 %}
        mdi:fan-speed-2
        {% elif spd == 75 %}
        mdi:fan-speed-3
        {% elif spd == 100 %}
        mdi:fan-plus
        {% endif %}
        
    - name: School Lesson Number
      unique_id: school_lesson_number
      state: >-
        {% set state = states('sensor.time') %}
        {% if '08:30' <= state  <= '15:30' %}
            {% if '08:30' <= state  <= '09:15' %}
              1 урок
            {% elif '09:30' <= state <= '10:15' %}
              2 урок
            {% elif '10:35' <= state <= '11:20' %}
              3 урок
            {% elif '11:40' <= state <= '12:25' %}
              4 урок
            {% elif '12:35' <= state <= '13:20' %}
              5 урок
            {% elif '13:40' <= state <= '14:25' %}
              6 урок
            {% elif '14:45' <= state <= '15:30' %}
              7 урок
            {% else %}
              перемена
            {% endif %}
        {% else %}
          
        {%endif%}
      # icon: >
      #   {% if is_state('binary_sensor.school_lesson_number','on') %}
      #   mdi:brightness-4
      #   {% else %}
      #   mdi:brightness-5
      #   {% endif %}

    - name: Dewpoint B
      unique_id: dewpoint_b
      unit_of_measurement: "°C"
      device_class: temperature
      state: >
        {% set b = 17.368 %}
        {% set c = 238.88 %}
        {% set a = 6.1121 %}
        {% set rh = states('sensor.0x00158d00020d7c3a_humidity') | float(1) %}
        {% set t = states('sensor.0x00158d00020d7c3a_temperature') | float(0) %}
        {% set gamma = log(rh / 100) + b * t / (c + t) %}
        {{ (c * gamma / (b - gamma)) | round(1, 'common') }}

    - name: Dewpoint T
      unique_id: dewpoint_t
      unit_of_measurement: "°C"
      device_class: temperature
      state: >
        {% set b = 17.368 %}
        {% set c = 238.88 %}
        {% set a = 6.1121 %}
        {% set rh = states('sensor.0x00158d0001e58754_humidity') | float(1) %}
        {% set t = states('sensor.0x00158d0001e58754_temperature') | float(0) %}
        {% set gamma = log(rh / 100) + b * t / (c + t) %}
        {{ (c * gamma / (b - gamma)) | round(1, 'common') }}

    - name: WiFi Devices Unavailable
      unique_id: wifi_devices_unavailable
      state: "{{ expand('group.wifi_devices') | selectattr('state','in',['unavailable']) | map(attribute='name') | list | count + expand('group.esp_devices') | selectattr('state','in',['unavailable','off']) | map(attribute='name') | list | count }}"
      icon: >
        {% if states('sensor.wifi_devices_unavailable')|int(0) >  0 %}
        mdi:wifi-off
        {% else %}
        mdi:wifi-check
        {% endif %}
      attributes:
        list: >-
          {%- set wifi = expand('group.wifi_devices') | selectattr('state', 'in', ['unavailable']) | list %}
          {%- set esp = expand('group.esp_devices') | selectattr('state', 'in', ['unavailable', 'off']) | list %}
          {%- set combined = wifi + esp %}
          {{ combined | map(attribute='entity_id') | map('device_attr', 'name') | join(', ') }}
      unit_of_measurement: "ea"
    #{{state.name}}{%- if not loop.last -%}, {%-endif%}

    - name: Abs Humidity B
      unique_id: abs_humidity_b
      state: >-
        {% set h, t = states('sensor.0x00158d00020d7c3a_humidity') | float(0), states('sensor.0x00158d00020d7c3a_temperature') %}
        {% if not h or t == 'unknown' -%}
        'unknown'
        {%- else %}
        {% set t = t | float(0) %}
        {{ (h*6.112*2.1674*e**((t*17.67)/(t+243.5))/(t+273.15))|round(2, 'common') }}
        {% endif %}
      unit_of_measurement: "g/m³"
      icon: mdi:water-percent

    - name: Abs Humidity H
      unique_id: abs_humidity_h
      state: >-
        {% set h, t = states('sensor.humidity_average') | float(0), states('sensor.temperature_average') %}
        {% if not h or t == 'unknown' -%}
        'unknown'
        {%- else %}
        {% set t = t | float(0) %}
        {{ (h*6.112*2.1674*e**((t*17.67)/(t+243.5))/(t+273.15))|round(2, 'common') }}
        {% endif %}
      unit_of_measurement: "g/m³"
      icon: mdi:water-percent

    - name: Washing Machine Stopwatch
      unique_id: washing_machine_stopwatch
      icon: mdi:timer-outline
      unit_of_measurement: "min"
      state: >
        {% set x = states('sensor.time') %}
        {{ ( (as_timestamp(now()) | int(0) - as_timestamp(states.timer.washer_working.last_changed) | int(0)) / 60 ) | round(0, 'common') if not is_state('timer.washer_working','idle') else 0}}      

  # - trigger:
  #     # - trigger: time_pattern
  #     #   seconds: "/30"
  #     - trigger: state
  #       entity_id: sensor.backup_state
  #     - trigger: homeassistant
  #       event: start
  #     - trigger: event
  #       event_type: event_template_reloaded
  #     - trigger: event
  #       event_type: automation_reloaded
  #   sensor:
  #     - name: GDrive Last Backup
  #       unique_id: gdrive_last_backup
  #       icon: mdi:clock
  #       state: "{{(as_timestamp(state_attr('sensor.backup_state','last_backup'), 0) )|timestamp_custom('%H:%M %d.%m.%Y',true,0)}}"

  #     - name: GDrive Backup State
  #       unique_id: gdrive_backup_state
  #       icon: mdi:backup-restore
  #       state: "{{states('sensor.backup_state')|capitalize|replace('_',' ')}}"
        
  - trigger:
      - trigger: state
        entity_id:
          - sensor.pova_7_last_used_app
          - binary_sensor.pova_7_interactive
      - trigger: homeassistant
        event: start
      - trigger: event
        event_type: event_template_reloaded
      - trigger: event
        event_type: automation_reloaded
    sensor:
      - name: Pova 7 Active App
        unique_id: pova_7_active_app
        icon: mdi:apps-box 
        state: >-
          {% if is_state('binary_sensor.pova_7_interactive','on') %}
          {{states('sensor.pova_7_last_used_app')}}
          {% endif %}
          
  - trigger:
      - trigger: state
        entity_id: button.yunmi_s20_2842_info
      - trigger: homeassistant
        event: start
      - trigger: event
        event_type: event_template_reloaded
      - trigger: event
        event_type: automation_reloaded
    sensor:
      - name: Viomi Blues Pro 1200g Cumu Flow Out
        unique_id: viomi_blues_pro_1200g_cumu_flow_out
        state: "{{( state_attr('button.yunmi_s20_2842_info','custom.cumu_flow_out')|int(0) / 1000 ) | round(1) }}"
        unit_of_measurement: "L"
      - name: Viomi Blues Pro 1200g Cumu Flow In
        unique_id: viomi_blues_pro_1200g_cumu_flow_in
        state: "{{( state_attr('button.yunmi_s20_2842_info','custom.cumu_flow_in')|int(0) / 1000 ) | round(1) }}"
        unit_of_measurement: "L"
      - name: Viomi Blues Pro 1200g Custom State Id
        unique_id: viomi_blues_pro_1200g_custom_state_id
        state: "{{state_attr('button.yunmi_s20_2842_info','custom.state_id')}}"
      - name: Viomi Blues Pro 1200g Fault Code
        unique_id: viomi_blues_pro_1200g_fault_code
        state: "{{state_attr('button.yunmi_s20_2842_info','statistics.fault')}}"