# #####################################################################################
#
# BATHROOM
#
# #####################################################################################
# Bathroom Fan - On Manual Single
# ##################################
  - alias: bathroom_button_b_single
    id: bathroom_button_b_single
    initial_state: true
    triggers:
      - trigger: event
        event_type: xiaomi_aqara.click
        event_data:
          entity_id: sensor.0x00158d0001b94abe_action
          click_type: single
    actions:
      - choose:
          - conditions:
              - condition: state
                entity_id: group.lights_b
                state: 'off'
            sequence:
              - action: xiaomi_miio.light_set_scene
                data:
                  entity_id: light.mirror_light_b
                  scene: 4
          - conditions:
              - condition: state
                entity_id: fan.esp32_node_b_fan_b
                state: 'off'
              - condition: state
                entity_id: group.lights_b
                state: 'on'
              - condition: state
                entity_id: switch.esp32_node_b_fan_b_force_mode
                state: 'off'
            sequence:
              - action: fan.turn_off
                entity_id: fan.esp32_node_b_fan_t
              - action: timer.pause
                entity_id: timer.fan_t
              - action: switch.turn_on
                entity_id: switch.esp32_node_b_fan_b_manual_mode
          - conditions:
              - condition: state
                entity_id: fan.esp32_node_b_fan_b
                state: 'on'
              - condition: state
                entity_id: switch.esp32_node_b_fan_b_force_mode
                state: 'off'
              # - condition: state
              #   entity_id: group.lights_b
              #   state: 'on'
            sequence:
              - action: switch.turn_off
                entity_id: switch.esp32_node_b_fan_b_manual_mode
              - action: switch.turn_on
                entity_id: switch.esp32_node_b_fan_b_auto_mode
  
# ##################################
# Bathroom Fan - On Manual Double
# ##################################
  - alias: bathroom_button_b_double
    id: bathroom_button_b_double
    initial_state: true
    triggers:
      - trigger: event
        event_type: xiaomi_aqara.click
        event_data:
          entity_id: sensor.0x00158d0001b94abe_action
          click_type: double
    actions:
      - choose:
          - conditions:
              - condition: state
                entity_id: group.lights_b
                state: 'off'
            sequence:
              - action: xiaomi_miio.light_set_scene
                data:
                  entity_id: light.mirror_light_b
                  scene: 1
          - conditions:
              - condition: state
                entity_id: group.lights_b
                state: 'on'
            sequence:
              - action: fan.toggle
                entity_id: fan.sonoff_pow_r2_1_bottom_fan
  
# # ##################################
# # Bathroom Fan - On Manual Hold
# # ##################################
# - alias: bathroom_button_b_hold
#   id: bathroom_button_b_hold
#   initial_state: true
#   triggers:
#     - trigger: event
#       event_type: xiaomi_aqara.click
#       event_data:
#         entity_id: sensor.0x00158d0001b94abe_action
#         click_type: hold
#   conditions:
#     - condition: state
#       entity_id: group.lights_b
#       state: 'off'
#   actions:
#     - action: switch.turn_on
#       entity_id: switch.0x00158d0002a36433_channel_2
              
# ##################################
# Bathroom Fan - Auto Off
# ##################################
# - alias: bathroom_fan_auto_off
#   id: bathroom_fan_auto_off
#   initial_state: true
#   triggers:
#     - trigger: state
#       entity_id: binary_sensor.high_humidity_b
#       to: 'off'
#     - trigger: homeassistant
#       event: start
#     - trigger: event
#       event_type: automation_reloaded
#   conditions:
#     - condition: state
#       entity_id: timer.fan_b
#       state: 'idle'
#     - condition: state
#       entity_id: binary_sensor.high_humidity_b
#       state: 'off'
#     - condition: state
#       entity_id: input_boolean.fan_manual_b
#       state: 'off'
#   actions:
#     - action: fan.turn_off
#       entity_id: fan.esp32_node_b_fan_b, fan.sonoff_pow_r2_1_bottom_fan

# ##################################
# Bathroom Fan - Auto On
# ##################################
# - alias: bathroom_fan_auto_on
#   id: bathroom_fan_auto_on
#   initial_state: true
#   triggers:
#     - trigger: state
#       entity_id: binary_sensor.high_humidity_b
#       to: 'on'
#     - trigger: homeassistant
#       event: start
#     - trigger: event
#       event_type: automation_reloaded
#     - trigger: time_pattern
#       minutes: '/5'
#   conditions:
#     - condition: state
#       entity_id: timer.fan_b
#       state: 'idle'
#     - condition: state
#       entity_id: group.lights_b
#       state: 'off'
#     - condition: state
#       entity_id: binary_sensor.high_humidity_b
#       state: 'on'
#   actions:
#     - action: fan.turn_on
#       entity_id: fan.sonoff_pow_r2_1_bottom_fan
#     - condition: state
#       entity_id: fan.esp32_node_b_fan_t
#       state: 'off'
#     - action: fan.turn_on
#       entity_id: fan.esp32_node_b_fan_b

# ##################################
# Bathroom Fan - Auto
# ##################################
  # - alias: bathroom_fan_auto
  #   id: bathroom_fan_auto
  #   initial_state: true
  #   mode: single
  #   max_exceeded: silent
  #   triggers:
  #     - trigger: time_pattern
  #       minutes: "/1"
  #   conditions:
  #     - condition: state
  #       entity_id: timer.fan_b
  #       state: 'idle'
  #     # - condition: template
  #     #   value_template: "{{ (as_timestamp(now())|int(0) - as_timestamp(state_attr('automation.bathroom_fan_auto', 'last_triggered'))|int(0)) > 60 }}"
  #   actions:
  #     - choose:
  #         - conditions:
  #             - condition: state
  #               entity_id: binary_sensor.high_humidity_b
  #               state: 'on'
  #               for:
  #                 seconds: 30
  #             - condition: template
  #               value_template: "{{ not is_state('switch.0x00158d0002a36433_channel_2','on') }}"
  #             - condition: state
  #               entity_id: fan.esp32_node_b_fan_b
  #               state: 'off'
  #           sequence:
  #             - action: fan.turn_on
  #               entity_id: fan.sonoff_pow_r2_1_bottom_fan
  #             - condition: state
  #               entity_id: fan.esp32_node_b_fan_t
  #               state: 'off'
  #             - action: fan.turn_on
  #               entity_id: fan.esp32_node_b_fan_b
  #         - conditions:
  #             - condition: state
  #               entity_id: binary_sensor.high_humidity_b
  #               state: 'off'
  #               for:
  #                 seconds: 30
  #             - condition: state
  #               entity_id: switch.esp32_node_b_fan_b_manual_mode
  #               state: 'off'
  #             - condition: template
  #               value_template: "{{ is_state('fan.esp32_node_b_fan_b','on') or is_state('fan.sonoff_pow_r2_1_bottom_fan','on')  }}"
  #           sequence:
  #             - action: fan.turn_off
  #               entity_id: fan.esp32_node_b_fan_b, fan.sonoff_pow_r2_1_bottom_fan


# ##################################
# Bathroom Fan - With light
# ##################################
  - alias: bathroom_fan_with_light
    id: bathroom_fan_with_light
    initial_state: true
    triggers:
      - trigger: state
        entity_id: light.0x00158d0002a36433_channel_2 #group.lights_b
        to: 'on'
        id: 'to_on'
      - trigger: state
        entity_id: light.0x00158d0002a36433_channel_2 #group.lights_b
        to: 'off'
        id: 'to_off'
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id: 'to_on'
            sequence:
              # - condition: template
              #   value_template: "{{ is_state('fan.esp32_node_b_fan_b','on') or is_state('fan.sonoff_pow_r2_1_bottom_fan','on') }}"
              # - condition: state
              #   entity_id: switch.esp32_node_b_fan_b_manual_mode
              #   state: 'off'
              # - condition: state
              #   entity_id: switch.esp32_node_b_fan_b_force_mode
              #   state: 'off'
              - action: switch.turn_off
                entity_id: switch.esp32_node_b_fan_b_auto_mode
              - action: fan.turn_off
                entity_id: fan.esp32_node_b_fan_b, fan.sonoff_pow_r2_1_bottom_fan
          - conditions:
              - condition: trigger
                id: 'to_off'
            sequence:
              # - condition: state
              #   entity_id: switch.esp32_node_b_fan_b_manual_mode
              #   state: 'off'
              # - condition: state
              #   entity_id: switch.esp32_node_b_fan_b_force_mode
              #   state: 'off'
              - action: switch.turn_on
                entity_id: switch.esp32_node_b_fan_b_auto_mode

# ##################################
# Bathroom - Fan Night mode
# ##################################
  - alias: bathroom_fan_night_mode
    id: bathroom_fan_night_mode
    initial_state: true
    triggers:
      - trigger: time_pattern
        minutes: '/5'
    conditions:
      - condition: state
        entity_id: switch.system_security_mode
        state: 'off'
      - condition: template
        value_template: "{{ states('fan.esp32_node_b_fan_b') in ['on','off'] }}"
      - condition: template
        value_template: "{{ 1 <= now().hour < 6 }}"
    actions:
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.0x00158d0003f1b140_contact
                state: 'off'
                for: 
                  minutes: 3
            sequence:
              - action: number.set_value
                data:
                  value: "30"
                target:
                  entity_id: number.esp32_node_b_humidity_set
          - conditions:
              - condition: state
                entity_id: binary_sensor.0x00158d0003f1b140_contact
                state: 'on'
                for: 
                  minutes: 3
            sequence:
              - action: number.set_value
                data:
                  value: "65"
                target:
                  entity_id: number.esp32_node_b_humidity_set

# ##################################
# Bathroom - Fan to normal mode
# ##################################
  - alias: bathroom_fan_to_normal_mode
    id: bathroom_fan_to_normal_mode
    initial_state: true
    triggers:
      - trigger: time
        at: "06:20:00"
    conditions:
      - condition: state
        entity_id: switch.system_security_mode
        state: 'off'
      - condition: template
        value_template: "{{ states('fan.esp32_node_b_fan_b') in ['on','off'] }}"
      - condition: template
        value_template: "{{states('number.esp32_node_b_humidity_set')|int(0) < 50 }}"
    actions:
      - action: number.set_value
        data:
          value: "65"
        target:
          entity_id: number.esp32_node_b_humidity_set
      - action: switch.turn_off
        entity_id: switch.esp32_node_b_fan_b_force_mode


# ##################################
# Bathroom - Bottom Fan On with Fan
# ##################################
  - alias: bathroom_bottom_fan_with_fan
    id: bathroom_bottom_fan_with_fan
    initial_state: true
    triggers:
      - trigger: state
        entity_id: fan.esp32_node_b_fan_b
        to: 
    conditions:
      - condition: state
        entity_id: switch.system_security_mode
        state: 'off'
      - condition: template
        value_template: "{{ states('fan.esp32_node_b_fan_b') in ['on','off'] }}"
    actions:
      - action: fan.turn_{{ states('fan.esp32_node_b_fan_b') }}
        entity_id: fan.sonoff_pow_r2_1_bottom_fan

# ##################################
# Bathroom - Bottom Fan On
# ##################################
  - alias: bathroom_bottom_fan
    id: bathroom_bottom_fan
    initial_state: true
    triggers:
      - trigger: time
        at: '07:00:03'
      - trigger: time
        at: '23:00:03'
    conditions:
      - condition: state
        entity_id: switch.system_security_mode
        state: 'off'
    actions:
      - action: fan.turn_{{ 'off' if is_state('binary_sensor.tod_day','on') else 'on' }}
#fan.turn_{%if states('binary_sensor.tod_day')%}off{%else%}on{%endif%}
        entity_id: fan.sonoff_pow_r2_1_bottom_fan

# ##################################
# Bathroom - Bottom Fan Toggle
# ##################################
  - alias: bathroom_bottom_fan_toggle
    id: bathroom_bottom_fan_toggle
    initial_state: true
    triggers:
      - trigger: time_pattern
        minutes: "/30"
    conditions:
      - condition: state
        entity_id: binary_sensor.tod_day
        state: 'off'
      - condition: state
        entity_id: switch.system_security_mode
        state: 'off'
      - condition: state
        entity_id: switch.esp32_node_b_fan_b_force_mode
        state: 'off'
    actions:
      - condition: template
        value_template: "{{ is_state('group.lights_b','off') or is_state('fan.sonoff_pow_r2_1_bottom_fan','on') }}"
      - action: fan.toggle
        entity_id: fan.sonoff_pow_r2_1_bottom_fan
  
# ##################################
# Bathroom - Main Fan Off by Timer
# ##################################
  - alias: bathroom_fan_off_by_timer
    id: bathroom_fan_off_by_timer
    mode: single
    max_exceeded: silent    
    initial_state: true
    triggers:
      - trigger: event
        event_type: timer.finished
        event_data:
          entity_id: timer.fan_b
      # - platform: state
      #   entity_id: fan.esp32_node_b_fan_b
      #   to: 'off'
    # conditions:
    #   - condition: template
    #     value_template: "{{ is_state_attr(this.entity_id, 'current',0) }}"
    actions:
      - action: fan.turn_off
        entity_id: fan.esp32_node_b_fan_b
      - action: switch.turn_off
        entity_id: switch.esp32_node_b_fan_b_manual_mode
      - condition: state
        entity_id: timer.fan_t
        state: 'paused'
      - action: fan.turn_on
        entity_id: fan.esp32_node_b_fan_t
      - action: timer.start
        entity_id: timer.fan_t
  
# ##################################
# Bathroom - Main Fan Timer with switch
# ##################################
  - alias: bathroom_main_fan_timer_with_switch
    id: bathroom_main_fan_timer_with_switch
    mode: single
    max_exceeded: silent
    initial_state: true
    triggers:
      - trigger: state
        entity_id: fan.esp32_node_b_fan_b
        to:
    conditions:
      # - condition: template
      #   value_template: "{{ is_state_attr(this.entity_id, 'current',0) }}"
      - condition: template
        value_template: "{{ states('fan.esp32_node_b_fan_b') in ['on','off'] }}"
      - condition: state
        entity_id: switch.esp32_node_b_fan_b_force_mode
        state: 'off'
    actions:
      - if:
          - condition: state
            entity_id: fan.esp32_node_b_fan_b
            state: 'on'
        then:
          - action: timer.start
            entity_id: timer.fan_b

# ##################################
# Bathroom Fan - Humiditiy above 92%
# ##################################
  # - alias: bathroom_high_humidity
  #   id: bathroom_high_humidity
  #   initial_state: true
  #   mode: single
  #   max_exceeded: silent
  #   triggers:
  #     - trigger: numeric_state
  #       entity_id: 
  #         - sensor.0x00158d00020d7c3a_humidity
  #         - sensor.e72e0120fcdc_humidity
  #       above: 95
  #       for: 
  #         minutes: 2
  #       id: 'force_on'
  #     - trigger: state
  #       entity_id: binary_sensor.high_humidity_b
  #       to: 'off'
  #       from: 'on'
  #       id: 'force_off'
  #   actions:
  #     - choose:
  #         - conditions:
  #             - condition: trigger
  #               id: "force_on"
  #           sequence:
  #             - action: fan.turn_off
  #               entity_id: fan.esp32_node_b_fan_t
  #             - action: fan.turn_on
  #               entity_id: fan.esp32_node_b_fan_b, fan.sonoff_pow_r2_1_bottom_fan
  #             - action: switch.turn_on
  #               entity_id: switch.esp32_node_b_fan_b_force_mode
  #         - conditions:
  #             - condition: trigger
  #               id: "force_off"
  #           sequence:
  #             - action: fan.turn_off
  #               entity_id: fan.esp32_node_b_fan_b, fan.sonoff_pow_r2_1_bottom_fan
  #             - action: switch.turn_off
  #               entity_id: switch.esp32_node_b_fan_b_force_mode


# ##################################
# Bathroom Fan - Door Closure at high humidity
# ##################################
  # - alias: bathroom_door_closure_high_humidity
  #   id: bathroom_door_closure_high_humidity
  #   initial_state: true
  #   mode: single
  #   max_exceeded: silent
  #   triggers:
  #     - trigger: state
  #       entity_id: binary_sensor.0x00158d0003f1b140_contact
  #       from: 'on'
  #       to: 'off'
  #   conditions:
  #     - condition: state
  #       entity_id: binary_sensor.high_humidity_b
  #       state: 'on'
  #     - condition: state
  #       entity_id: binary_sensor.0x00158d0003f1b140_contact
  #       state: 'off'
  #     - condition: state
  #       entity_id: switch.0x00158d0002a36433_channel_2
  #       state: 'off'
  #     - condition: state
  #       entity_id: binary_sensor.tod_day
  #       state: 'on'
  #     - condition: state
  #       entity_id: switch.system_dark_mode
  #       state: 'off'
  #     - condition: template
  #       value_template: "{{(as_timestamp(now())-as_timestamp(state_attr('automation.toilet_close_seat_notify', 'last_triggered'))|int(0)) > 15 }}"
  #     - condition: template
  #       value_template: "{{ is_state_attr(this.entity_id, 'current',0) }}"
  #   actions:
  #     - action: media_player.play_media
  #       data:
  #         media_content_type: dialog
  #         entity_id: media_player.yandex_k
  #         media_content_id: "В ванне высокая влажность - рекомендуется не закрывать дверь! Спасибо!"
  #         extra:
  #           volume_level: '{{states("input_number.main_volume")|float(0)}}'