# #####################################################################################
#
# HALL BIG
#
# #####################################################################################
# # Hall Big - Main Door Bottom Lock
# # ##################################
# - alias: hall_big_bottom_lock
#   id: hall_big_bottom_lock
#   initial_state: true
#   triggers:
#     - trigger: state
#       entity_id: binary_sensor.bottom_lock #binary_sensor.0x00158d0002a1a4b2_contact
#   conditions:
#     - condition: template
#       value_template: "{{states('sensor.ha_uptime')|float > 2 and is_state('input_boolean.ha_shutdown','off') }}"
#     - condition: template
#       value_template: "{{ states('binary_sensor.top_lock') in ['on','off'] and trigger.from_state.state != trigger.to_state.state }}"
#   actions:
#     - action: script.turn_on
#       data:
#         entity_id: >
#           script.bottom_lock_yellow_led_blink_{% if is_state('binary_sensor.bottom_lock','on') %}off{% else %}on{% endif %}
#     - action: notify.telegram
#       data:
#         message: "{% if is_state('binary_sensor.bottom_lock','on') %}\U0001F513\U0001F53D Нижний замок открыт!{% else %}\U0001F512\U0001F53D Нижний замок закрыт!{% endif %}"


# ##################################
# Hall Big - Main Door Locks
# ##################################
  - alias: hall_big_main_door_locks
    id: hall_big_main_door_locks
    mode: single
    max_exceeded: silent    
    initial_state: true
    triggers:
      - trigger: state
        entity_id: binary_sensor.top_lock #binary_sensor.0x00158d0002b7c2c8_contact
        to:
        id: 'lock_top'
      - trigger: state
        entity_id: binary_sensor.bottom_lock #binary_sensor.0x00158d0002a1a4b2_contact
        to:
        id: 'lock_bottom'
    conditions:
      - condition: numeric_state
        entity_id: sensor.ha_uptime
        above: 2
      - condition: state
        entity_id: input_boolean.ha_shutdown
        state: 'off'
      - condition: template
        value_template: "{{ states('binary_sensor.top_lock') in ['on','off'] and states('binary_sensor.top_lock') in ['on','off'] }}"
      - condition: template
        value_template: "{{ trigger.from_state.state != trigger.to_state.state }}"
      # - condition: template
      #   value_template: "{{ is_state_attr(this.entity_id, 'current',0) }}"
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id: 'lock_top'
            sequence:
              - action: notify.telegram
                data:
                  message: "{% if is_state('binary_sensor.top_lock','on') %}\U0001F513\U0001F53C Верхний замок открыт!{% else %}\U0001F512\U0001F53C Верхний замок закрыт!{% endif %}"
              # - action: media_player.volume_set
              #   data:
              #     entity_id: media_player.{{states('input_select.main_audio_out')|lower}}
              #     volume_level: '{{states("input_number.main_volume")|float}}'
              # - action: >
              #     {% if is_state('binary_sensor.tod_day','on') %} script.top_lock_tts
              #     {% else%} script.noop
              #     {% endif %}
          - conditions:
              - condition: trigger
                id: 'lock_bottom'
            sequence:
              - action: notify.telegram
                data:
                  message: "{% if is_state('binary_sensor.bottom_lock','on') %}\U0001F513\U0001F53D Нижний замок открыт!{% else %}\U0001F512\U0001F53D Нижний замок закрыт!{% endif %}"
              # - action: media_player.volume_set
              #   data:
              #     entity_id: media_player.{{states('input_select.main_audio_out')|lower}}
              #     volume_level: '{{states("input_number.main_volume")|float}}'
              # - action: script.turn_on
              #   data:
              #     entity_id: >
              #       {% if is_state('binary_sensor.tod_day','on') %}
              #         script.bottom_lock_tts
              #       {% endif %}
      - action: script.turn_on
        entity_id: script.domofon_locks_indicator
      # - action: light.turn_off
      #   entity_id: light.esp32_domofon_led
      # - choose:
      #     - conditions:
      #         - condition: state
      #           entity_id: binary_sensor.bottom_lock
      #           state: "off"
      #         - condition: state
      #           entity_id: binary_sensor.top_lock
      #           state: "on"
      #       sequence:
      #         - action: light.turn_on
      #           data:
      #             entity_id: light.esp32_domofon_led
      #             effect: "Blink"
      #             brightness: 64
      #             color_name: "orange"
      #     - conditions:
      #         - condition: state
      #           entity_id: binary_sensor.top_lock
      #           state: "off"
      #       sequence:
      #         - action: light.turn_on
      #           entity_id: light.esp32_domofon_led
      #           data:
      #             brightness: 64
      #             color_name: "orange"
