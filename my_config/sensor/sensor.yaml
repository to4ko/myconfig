# - platform: command_line
#   name: Workday RAW
#   command: >-
#     curl https://isdayoff.ru/api/getdata?date1={{ now().date().strftime("%Y%m%d") }}&date2={{ (now().date() + timedelta(days=1)).strftime("%Y%m%d") }}
#   scan_interval: 600

# - platform: dahua_vto
#   name: VTO2211
#   host: 192.168.1.72
#   username: !secret vto_user
#   password: !secret vto_pass

# - platform: imap_email_content
#   server: imap.gmail.com
#   name: DoorCam Motion Sensor
#   port: 993
#   username: !secret gmail_username
#   password: !secret gmail_password
#   folder: DoorCam
#   senders:
#     - !secret doorcam_email
# - platform: imap
#   server: imap.gmail.com
#   name: DoorCam Email Unread
#   port: 993
#   username: !secret gmail_username
#   password: !secret gmail_password
#   folder: DoorCam
#   search: !secret search_from_cam

# - platform: sql
#   queries:
#     - name: Temp Out Yesterday
#       query: >
#           SELECT
#               state
#           FROM
#               states
#           WHERE
#               entity_id = 'sensor.0x158d0001e8995a_temperature'
#               and state <> 'unavailable'
#               and created < DATETIME('NOW','-1 DAY')
#           ORDER BY state_id DESC
#           LIMIT 1;
#       column: 'state'
#       unit_of_measurement: '°C'
#   scan_interval: 60

# - platform: seventeentrack
#   username: !secret 17track_user
#   password: !secret 17track_pass

  - platform: derivative
    source: sensor.0x00158d00020d7c3a_humidity
    name: Bathroom Humidity Derivative
    round: 2
    unit_time: min
    time_window: "00:03:00"

  - platform: derivative
    source: sensor.esp32_node_b_humidity
    name: Bathroom ESP32 Humidity Derivative
    round: 2
    unit_time: min
    time_window: "00:03:00"

  - platform: history_stats
    name: Treadmill Stats
    entity_id: binary_sensor.treadmill
    state: "on"
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: Fridge Door Counter
    entity_id: binary_sensor.0x00158d000253722b_contact
    state: "on"
    type: count
    start: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: Freezer Door Counter
    entity_id: binary_sensor.0x00158d000252acba_contact
    state: "on"
    type: count
    start: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: Main Door Counter
    entity_id: binary_sensor.582d344031f7_contact #binary_sensor.0x00158d0001e5d6be_contact
    state: "on"
    type: count
    start: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    end: "{{ now() }}"

  - platform: history_stats
    name: Kettle Counter
    entity_id: binary_sensor.kettle_boil_k
    state: "on"
    type: count
    start: "{{ now().replace(hour=0, minute=0, second=0, microsecond=0) }}"
    end: "{{ now() }}"

  # - platform: statistics
  #   name: RO Pump Power Cycles
  #   entity_id: binary_sensor.ro_pump_status
  #   state_characteristic: count
  #   max_age:
  #     seconds: 3
  #   sampling_size: 50
  #   precision: 1

  - platform: python_script
    name: repairs state
    scan_interval: "01:00:00"
    source: |
      from homeassistant.helpers.issue_registry import async_get as async_get_issue_registry 
      issue_registry = async_get_issue_registry(self.hass)
      issues = [
          issue.to_json()
          for issue in issue_registry.issues.values()
          if issue.active
      ]
      self.state = len(issues)
      self.attributes = { "issues" : issues }
  
  - platform: python_script
    name: Devices Count
    scan_interval: 300
    unit_of_measurement: ea
    source: |
      self.state = len(self.hass.data['device_registry'].devices)
  # registry = self.hass.data['device_registry']
  # registry.async_load()
  # self.state = len(registry.devices)
  
  # - platform: statistics
  #   name: AirQ Delta
  #   entity_id: sensor.d1mini_air_freshener_airq
  #   state_characteristic: change
  #   max_age:
  #     seconds: 30
  #   sampling_size: 20
  
  # - platform: statistics
  #   name: airq_adc_toilet_stat
  #   entity_id: sensor.d1mini_air_freshener_adc
  #   state_characteristic: mean
  #   max_age:
  #     days: 1
  #   sampling_size: 11520
  
  - platform: statistics
    unique_id: ms01a_power_12h_avg
    name: ms01a Power 12h Avg
    entity_id: sensor.ms01a_plug_hb_power
    state_characteristic: average_linear
    max_age:
      hours: 12
    sampling_size: 432000
    precision: 1

  - platform: statistics
    unique_id: ms01b_power_12h_avg
    name: ms01b Power 12h Avg
    entity_id: sensor.ms01b_plug_hb_power
    state_characteristic: average_linear
    max_age:
      hours: 12
    sampling_size: 432000
    precision: 1

  - platform: statistics
    unique_id: pbs100_power_12h_avg
    name: pbs100 Power 12h Avg
    entity_id: sensor.pbs100_plug_st_power
    state_characteristic: average_linear
    max_age:
      hours: 12
    sampling_size: 432000
    precision: 1

  # - platform: mqtt
  #   state_topic: esp01_air_freshener/sprays_count
  #   name: Air Freshener Counter
  #   unit_of_measurement: "ea"
  #   value_template: "{{ value | int(0) }}"
  #   icon: mdi:counter
  
  # - platform: mqtt
  #   state_topic: esp01_air_freshener/last_hearbeat
  #   name: Air Freshener Last Heartbeat
  #   value_template: "{{ value }}"
  #   icon: mdi:clock
  
  # - platform: mqtt
  #   state_topic: esp01_air_freshener/last_spray
  #   name: Air Freshener Last Spray
  #   value_template: "{{ value }}"
  #   icon: mdi:clock
  
  # - platform: mqtt
  #   state_topic: esp01_air_freshener/tank_replace
  #   name: Air Freshener Tank Replace
  #   value_template: "{{ value }}"
  #   icon: mdi:clock
  
  # | timestamp_custom('%d.%m.%Y %H:%M:%S')
  
  # - platform: modem_callerid
  #   device: /dev/serial/by-id/usb-U.S.Robotics_USB_Modem_0000003-if00
  
  # - platform: opensky
  #   radius: 3
  #   name: opensky_home
  
  # - platform: opensky
  #   radius: 5
  #   name: opensky_dacha
  #   latitude: !secret dacha_latitude
  #   longitude: !secret dacha_longitude
  
  # - platform: filter
  #   name: Radiation Dose Filtered 1m
  #   entity_id: sensor.geiger_radiation_dose_per_hour
  #   filters:
  #     - filter: time_simple_moving_average
  #       window_size: "00:01"
  
  # - platform: filter
  #   name: Radiation Dose Filtered 5m
  #   entity_id: sensor.geiger_radiation_dose_per_hour
  #   filters:
  #     - filter: time_simple_moving_average
  #       window_size: "00:05"
  
  # - platform: mold_indicator
  #   name: mold_t
  #   indoor_temp_sensor: sensor.sonoff_pow_r2_2_temperature
  #   indoor_humidity_sensor: sensor.sonoff_pow_r2_2_humidity
  #   outdoor_temp_sensor: sensor.esp32_node_mb_outside
  #   calibration_factor: 2.227848101
  
  # - platform: mold_indicator
  #   name: mold_pipe_t
  #   indoor_temp_sensor: sensor.esp32_node_b_cold_pipe
  #   indoor_humidity_sensor: sensor.0x00158d0001e58754_humidity
  #   outdoor_temp_sensor: sensor.esp32_node_mb_outside
  #   calibration_factor: 2.554146341
  
  # - platform: statistics
  #   name: Humidity bathroom stats
  #   entity_id: sensor.0x00158d00020d7c3a_humidity
  #   sampling_size: 86400
  #   max_age:
  #     hours: 24
  
  # - platform: derivative
  #   source: sensor.0x00158d00020d7c3a_humidity
  #   name: Humidity bathroom derivative
  #   unit_time: min
  #   time_window: "00:10:00"
  
  # - platform: statistics
  #   name: Oven Temp Stats
  #   entity_id: sensor.esp8266_oven_temp_k
  #   sampling_size: 30
  #   max_age:
  #     minutes: 5
  
  # - platform: template
  #   sensors:
  #     oven_temp_change:
  #       value_template: "{{ state_attr('sensor.oven_temp_stats', 'change') }}"
  #       unit_of_measurement: '°C'
  #       device_class: temperature
  
  # - platform: derivative
  #   source: sensor.oven_temp_stats
  #   name: Temperature Oven derivative
  #   unit_time: min
  #   time_window: "00:05:00"
  
  # - platform: statistics
  #   name: out_humidity_stats
  #   entity_id: sensor.0x158d000239ad5b_humidity
  #   sampling_size: 900
  #   max_age:
  #     minutes: 15

  - platform: websocket_api

  - platform: statistics
    unique_id: out_temp_max_24h
    name: Out Temperature Max 24h
    entity_id: sensor.esp32_node_mb_outside #sensor.0x158d0001e8995a_temperature
    state_characteristic: value_max
    sampling_size: 6000
    max_age:
      hours: 24
  
  - platform: statistics
    unique_id: out_temp_min_24h
    name: Out Temperature Min 24h
    entity_id: sensor.esp32_node_mb_outside #sensor.0x158d0001e8995a_temperature
    state_characteristic: value_min
    sampling_size: 6000
    max_age:
      hours: 24
  
  - platform: statistics
    unique_id: stove_median
    name: stove_temperature_median
    entity_id: sensor.esp8266_hood_k_tcouple
    state_characteristic: median
    sampling_size: 3000
    max_age:
      hours: 6


  - platform: min_max
    type: max
    name: ds1621plus Drive Temperature Max
    round_digits: 1
    entity_ids:
      - sensor.ds1621plus_drive_1_temperature
      - sensor.ds1621plus_drive_2_temperature
      - sensor.ds1621plus_drive_3_temperature
      - sensor.ds1621plus_drive_4_temperature
      - sensor.ds1621plus_drive_5_temperature
      - sensor.ds1621plus_drive_6_temperature

  - platform: statistics
    unique_id: ds1621max_drive_temp_6h
    name: ds1621plus Drive Temperature Max 6h
    entity_id: sensor.ds1621plus_drive_temperature_max
    state_characteristic: value_max
    sampling_size: 6000
    max_age:
      hours: 6

  - platform: min_max
    type: mean
    name: Humidity Average
    round_digits: 0
    entity_ids:
      - sensor.0x00158d0001e586af_humidity
      - sensor.0x00158d0001e58714_humidity
      - sensor.0x00158d0001e6d85a_humidity
      - sensor.0x00158d000222c746_humidity
      - sensor.0x00158d000233fb72_humidity
      - sensor.0x00158d0002464ec0_humidity
  
  - platform: min_max
    type: mean
    name: Humidity Average B
    round_digits: 0
    entity_ids:
      - sensor.0x00158d00020d7c3a_humidity
      - sensor.e72e0120fcdc_humidity
  
  - platform: min_max
    type: mean
    name: Temperature Average
    round_digits: 2
    entity_ids:
      - sensor.0x00158d0001e586af_temperature
      - sensor.0x00158d0001e58714_temperature
      - sensor.0x00158d0001e6d85a_temperature
      - sensor.0x00158d000222c746_temperature
      - sensor.0x00158d000233fb72_temperature
      - sensor.0x00158d0002464ec0_temperature
  
  - platform: min_max
    type: mean
    name: Pressure Average
    round_digits: 2
    entity_ids:
      - sensor.0x00158d000233fb72_pressure
      #- sensor.0x00158d000237167c_pressure
      - sensor.esp32_node_k_pressure
      - sensor.esp32_node_mb_pressure
      - sensor.esp32_node_v_pressure
      - sensor.sonoff_pow_r2_2_pressure
  
  # - platform: rest
  #   resource: https://edge.qiwi.com/sinap/crossRates
  #   name: QIWI USD Rate
  #   #force_update: true
  #   headers:
  #     authorization: !secret qiwi_token
  #     Content-Type: application/json
  #     Accept: application/json
  #   value_template: "{{ value_json.result | selectattr('to', 'eq', '840') | selectattr('from', 'eq', '643') | map(attribute='rate') | join('') if value_json.result is defined else none }}"
  #   unit_of_measurement: RUB
  
  # - platform: rest
  #   resource: https://www.cbr-xml-daily.ru/daily_json.js
  #   name: USD_RUR
  #   value_template: "{{ value_json.Valute.USD.Value | float(0) | round(2, 'common') }}"
  #   unit_of_measurement: "RUR"
  #   scan_interval: 1200
  
  # - platform: rest
  #   resource: https://www.cbr-xml-daily.ru/daily_json.js
  #   name: EUR_RUR
  #   value_template: "{{ value_json.Valute.EUR.Value | float(0) | round(2, 'common') }}"
  #   unit_of_measurement: "RUR"
  #   scan_interval: 1200
  
  # - platform: github
  #   access_token: !secret github_access_token
  #   repositories:
  #     - path: "to4ko/myconfig"
  #       name: myconfig
  
  - platform: statistics
    unique_id: pressure_average
    entity_id: sensor.pressure_average
    name: pressure
    state_characteristic: mean
    max_age:
      minutes: 10
    sampling_size: 10000
  
  - platform: statistics
    unique_id: pressure_change_3h
    entity_id: sensor.pressure_average
    name: pressure_change_3h
    state_characteristic: change
    max_age:
      hours: 3
    sampling_size: 10800
  
  - platform: statistics
    unique_id: pressure_change_6h
    entity_id: sensor.pressure_average
    name: pressure_change_6h
    state_characteristic: change
    max_age:
      hours: 6
    sampling_size: 21600
  
  # - platform: season
  #   type: astronomical
  
  # ############################################################################
  # External IP sensor
  # ############################################################################
  #  - platform: rest
  #    resource: http://ip.jsontest.com
  #    name: External IP
  #    value_template: '{{ value_json.ip }}'
  
  # - platform: moon
  
  # ############################################################################
  # Time\date sensor
  # ############################################################################
  - platform: time_date
    display_options:
      - "time"
      - "date"
      - "date_time"
  
  # - platform: template
  #   sensors:
  #     current_year:
  #       value_template: "{{states('sensor.date').split('-')[0]}}"
  #       unit_of_measurement: ''
  #     current_month:
  #       value_template: "{{states('sensor.date').split('-')[1]}}"
  #       unit_of_measurement: ''
  #     current_day:
  #       value_template: "{{states('sensor.date').split('-')[2]}}"
  #       unit_of_measurement: ''
  #     current_hour:
  #       value_template: "{{states('sensor.time').split(':')[0]}}"
  #       unit_of_measurement: ''
  #     current_minute:
  #       value_template: "{{states('sensor.time').split(':')[1]}}"
  #       unit_of_measurement: ''
  
  # ############################################################################
  # Xiaomi GW3 Sensors
  # ############################################################################
  # - platform: template
  #   sensors:
  #     gw3_hb_radio_tx_power:
  #       value_template: "{{state_attr('sensor.0x588e81fffedcb38d_gateway','radio_tx_power')|int(0)}}"
  #       icon_template: mdi:signal-cellular-2
  #       friendly_name: Gateway3 HB Radio TX Power
  #       unit_of_measurement: ''
  #     gw3_hb_radio_channel:
  #       value_template: "{{state_attr('sensor.0x588e81fffedcb38d_gateway','radio_channel')|int(0)}}"
  #       icon_template: mdi:radio-tower
  #       friendly_name: Gateway3 HB Radio Channel
  #       unit_of_measurement: ''
  
  #     gw3_hs_radio_tx_power:
  #       value_template: "{{state_attr('sensor.0x842e14fffe1508a6_gateway','radio_tx_power')|int(0)}}"
  #       icon_template: mdi:signal-cellular-2
  #       friendly_name: Gateway3 HS Radio TX Power
  #       unit_of_measurement: ''
  #     gw3_hs_radio_channel:
  #       value_template: "{{state_attr('sensor.0x842e14fffe1508a6_gateway','radio_channel')|int(0)}}"
  #       icon_template: mdi:radio-tower
  #       friendly_name: Gateway3 HS Radio Channel
  #       unit_of_measurement: ''
  
  #     # gw3_hs_free_mem:
  #     #   value_template: "{{state_attr('sensor.0x842e14fffe1508a6_gateway','free_mem')|int(0)}}"
  #     #   icon_template: mdi:chip
  #     #   friendly_name: Gateway3 HS Free Memory
  #     #   unit_of_measurement: 'kB'
  
  #     gw3_s_radio_tx_power:
  #       value_template: "{{state_attr('sensor.0x588e81fffedd3c41_gateway','radio_tx_power')|int(0)}}"
  #       icon_template: mdi:signal-cellular-2
  #       friendly_name: Gateway3 S Radio TX Power
  #       unit_of_measurement: ''
  #     gw3_s_radio_channel:
  #       value_template: "{{state_attr('sensor.0x588e81fffedd3c41_gateway','radio_channel')|int(0)}}"
  #       icon_template: mdi:radio-tower
  #       friendly_name: Gateway3 S Radio Channel
  #       unit_of_measurement: ''
  
  #     gw3_k_radio_tx_power:
  #       value_template: "{{state_attr('sensor.0x588e81fffe72678e_gateway','radio_tx_power')|int(0)}}"
  #       icon_template: mdi:signal-cellular-2
  #       friendly_name: Gateway3 K Radio TX Power
  #       unit_of_measurement: ''
  #     gw3_k_radio_channel:
  #       value_template: "{{state_attr('sensor.0x588e81fffe72678e_gateway','radio_channel')|int(0)}}"
  #       icon_template: mdi:radio-tower
  #       friendly_name: Gateway3 K Radio Channel
  #       unit_of_measurement: ''
  
  #{{states|selectattr('attributes.device_class', 'eq','battery')|selectattr('attributes.unit_of_measurement','eq','%')|selectattr('state','<','20')|map(attribute='attributes.friendly_name') | unique | sort | list  | join('\n')}}
  
  # battery_devices_list:
  #   friendly_name: Battery Devices List
  #   value_template: >
  #     {%-for state in states.sensor
  #     if  state.entity_id.endswith("_battery")%}
  #     {{ state.name}}: {{state.state}}%%{%- if not loop.last %};{%endif%}
  #     {%-endfor%}
  
  # battery_levels:
  #   friendly_name: Battery Levels
  #   value_template: >
  #     {%- set threshold = 50 -%}
  #     {% set domains = ['sensor'] %}
  #     {% for domain in domains -%}
  #     {% for item in states[domain] if ( ("_battery" in item.entity_id and "0x" in item.entity_id and item.state| int(0) < threshold) )-%}
  #     {% if (item.state | int(0) < threshold) -%}
  
  #         {{ item.name }}: {{ item.state }}%{%- if not loop.last %};
  #     {% endif -%}{% endif -%}
  
  #     {% endfor %}
  #     {%- endfor %}
  
  # battery_levels_2:
  #   friendly_name: Battery Levels2
  #   value_template: >
  #     {%- macro LowBattery() -%}
  #     {% for item in states.sensor -%}
  #     {%- if "_battery" in item.entity_id and "0x" in item.entity_id and (item.state|int(0) < 50 ) -%}
  #     X
  #     {%- endif -%}
  #     {%- endfor %}
  #     {%- endmacro -%}
  #     {%- if LowBattery()[0] == "X" -%}
  #     {{LowBattery()|list|length }}
  #     {%- else -%}
  #     0
  #     {%- endif -%}
  #   attribute_templates:
  #     devices: >-
  #       {% for item in states.sensor-%}
  #       {%- if "_battery" in item.entity_id and "0x" in item.entity_id and (item.state|int(0) < 50 ) %}
  #       {{item.entity_id}}: {{ item.state }}%{% if not loop.last %}; {%- endif %}
  #       {%- endif -%}
  #       {%- endfor %}
  
  # - platform: scrape
  #   name: Magnetic Storm
  #   resource: https://tesis.lebedev.ru/magnetic_storms.html
  #   select: table.main td p:nth-of-type(4) > b
  #   unit_of_measurement: " "
  #   value_template: >
  #     {% if value %}
  #       {{ (value.split('(')[0] | int(default=0)) if "(" in value else "" }}
  #     {% else %}
  #       Unknown
  #     {% endif %}
  #   scan_interval: 300
  
  # - platform: waqi
  #   token: !secret aqicn_api_key
  #   scan_interval: 900
  #   locations:
  #     - Ostankino, Moscow
  # - platform: history_stats
  #   name: Canister T Stats
  #   entity_id: binary_sensor.0x00158d0003262a35_contact
  #   state: 'on'
  #   start: "{{ now().replace(hour=0, minute=0, second=0) }}"
  #   end: "{{ now() }}"
  #   type: count
  
  # - platform: history_stats
  #   name: Spray T Stats
  #   entity_id: switch.d1mini_air_freshener_spray
  #   state: 'on'
  #   start: "{{ now().replace(hour=0, minute=0, second=0) }}"
  #   end: "{{ now() }}"
  #   type: count
  
  # - platform: history_stats
  #   name: Thermo Pad On Rate
  #   entity_id: switch.thermal_pad_relay
  #   state: 'on'
  #   end: "{{ now() }}"
  #   duration:
  #     hours: 1
  #   type: ratio
