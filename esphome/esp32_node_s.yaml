substitutions:
  board_name: esp32_node_s
  node_name: esp32-node-s
 
esphome:
  name: ${node_name}
  comment: "ESP32 CO2 LED Api TH Node S"
  friendly_name: "ESP32 Node S"
  area: "Sasha's room"  
  on_boot:
    priority: 800
    then:
      - switch.turn_on: id_abc_calibration
      - delay: 5s
      - ble.disable:

esp32_ble:
  enable_on_boot: False


safe_mode:
  disabled: False
  num_attempts: 5
  reboot_timeout: 15min

esp32:
  board: nodemcu-32s
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_pass
  domain: !secret my_domain
  reboot_timeout: 15min
  #output_power: 17.5dB
  #fast_connect: true
  #power_save_mode: none
  # manual_ip:
  #   static_ip: 192.168.1.106
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8
    
logger:
  baud_rate: 0

api:
  reboot_timeout: 0min

ota:
  - platform: esphome

# web_server:
#   port: 80
  
binary_sensor:
  - platform: status
    name: "Status"
    id: id_status
    on_state:
      then:
        - if:
            condition:
              - binary_sensor.is_on: id_templ_status
            then:
              - logger.log: "The sensor value is below 30!"
              - switch.turn_on: id_ha_status
              - delay: 5s
            else:
              - switch.turn_off: id_ha_status

  - platform: homeassistant
    name: "Main HA State"
    entity_id: binary_sensor.main_ha_state
    device_class: connectivity

  - platform: template
    name: "HA Connect Status"
    id: id_templ_status
    lambda: |-
      return id(id_status).state;
    filters:
      - delayed_on: 5s
      - delayed_off: 5s
    on_state:
      then:
        - if:
            condition:
              - binary_sensor.is_on: id_templ_status
            then:
              - logger.log: "The sensor value is below 30!"
              - switch.turn_on: id_ha_status
              - delay: 5s
            else:
              - switch.turn_off: id_ha_status

  - platform: gpio
    pin: GPIO16
    name: "Radar"
    device_class: occupancy

switch:
  - platform: gpio
    pin: GPIO13
    id: id_ha_status
    name: "HA Status"

  - platform: template
    name: "ABC"
    id: id_abc_calibration
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    on_turn_on:
      - senseair.abc_enable: id_my_co2
    on_turn_off:
      - senseair.abc_disable: id_my_co2

uart:
  rx_pin: GPIO03
  tx_pin: GPIO01
  baud_rate: 9600

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: True

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO25
    num_leds: 75
    chipset: ws2812
    name: "LED"  
  # - platform: neopixelbus
  #   variant: WS2812
  #   pin: GPIO25
  #   num_leds: 75
  #   type: GRB
  #   name: "LED"
  #   method:
  #     type: esp32_rmt
  #     channel: 2
    id: light1
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:

text_sensor:
  - platform: template
    name: "Uptime"
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: "IP"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "MAC"
    # scan_results:
    #   name: "Latest Scan Results"

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

sensor:
  - platform: uptime
    name: "Uptime s"
    id: uptime_sensor
    update_interval: 15s
    disabled_by_default: true
    
  - platform: senseair
    co2:
      name: "CO2"
    update_interval: 60s
    id: id_my_co2

  - platform: wifi_signal
    name: "WiFi RSSI"
    update_interval: 60s    

button:
  - platform: restart
    name: "Restart"

  - platform: template
    name: "CO2 Calibrate"
    on_press:
      - senseair.background_calibration: id_my_co2

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow