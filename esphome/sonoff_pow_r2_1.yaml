substitutions:
  board_name: sonoff_pow_r2_1
  node_name: sonoff-pow-r2-1

esphome:
  name: ${node_name}
  on_boot:
    priority: -10
    then:
      - light.turn_off: main_led
      - switch.turn_on: relay
  comment: "Washing Machine and Bottom Fan"
  friendly_name: "Sonoff POW R2 1"
  area: "Bathroom"

safe_mode:
  disabled: False
  num_attempts: 5
  reboot_timeout: 15min

esp8266:
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_pass
  domain: !secret my_domain
  reboot_timeout: 15min
  #output_power: 17.5dB
  #fast_connect: true
  #power_save_mode: none
  # manual_ip:
  #   static_ip: 192.168.1.131
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8

logger:
  baud_rate: 0

uart:
  rx_pin: RX
  baud_rate: 4800
  parity: EVEN

api:
  reboot_timeout: 0s

ota:
  - platform: esphome

web_server:
  port: 80

output:
  - platform: gpio
    id: blue_led
    pin: GPIO13
    inverted: True

  - platform: gpio
    id: fan_output
    pin: 
      number: GPIO04
      inverted: yes

light:
  - platform: binary
    name: "Status LED"
    internal: true
    output: blue_led
    id: main_led

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Button"
    on_press:
      - switch.toggle: relay
    on_multi_click:
      - timing:
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at least 0.2s
        then:
          - switch.turn_on: id_restart           
      
  - platform: status
    name: "Status"

  - platform: template
    name: ${board_name}_Washer_State
    lambda: |-
      if (id(id_power).state > 5) {
        return true;
      } else {
        return false;
      }
    device_class: power

fan:
  - platform: binary
    output: fan_output
    name: "Bottom Fan"

switch:
  - platform: gpio
    name: "Relay"
    pin: GPIO12
    id: relay
    on_turn_on:
      then:
        - light.turn_off: main_led
    on_turn_off:
      then:
        - light.turn_on: main_led

  # - platform: gpio
  #   name: ${board_name}_Bottom_Fan
  #   pin:
  #     number: GPIO04
  #     inverted: yes    
  #   id: bottom_fan
  #   restore_mode: RESTORE_DEFAULT_OFF
  #   icon: mdi:cached
    

  - platform: restart
    name: "Restart"
    id: id_restart
    internal: true

sensor:
  # - platform: dht
  #   pin: GPIO04
  #   temperature:
  #     name: "Temperature"
  #     unit_of_measurement: "Â°C"
  #     accuracy_decimals: 2
  #   humidity:
  #     name: "Humidity"
  #     unit_of_measurement: "%"
  #     accuracy_decimals: 2
  #   update_interval: 15s
  #   model: AM2302
    
  - platform: cse7766
    current:
      name: "Current"
      accuracy_decimals: 1
      device_class: current
      id: id_current
      filters:
        - throttle_average: 10s      
    voltage:
      name: "Voltage"
      accuracy_decimals: 1
      device_class: voltage
      id: id_voltage
      filters:
        - throttle_average: 10s      
    power:
      name: "Power"
      accuracy_decimals: 0
      id: id_power
      unit_of_measurement: W
      device_class: power
      filters:
        - throttle_average: 10s  

  - platform: integration
    name: "Energy"
    sensor: id_power
    time_unit: h
    accuracy_decimals: 3
    unit_of_measurement: 'kWh'
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.001
    id: id_energy
    restore: true

  - platform: uptime
    name: "Uptime s"
    id: uptime_sensor
    disabled_by_default: true

  - platform: wifi_signal
    name: "WiFi RSSI"
    update_interval: 60s

text_sensor:
  - platform: template
    name: "Uptime"
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: "IP"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "MAC"
    # scan_results:
    #   name: "Latest Scan Results"

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

button:
  - platform: restart
    name: "Restart"
    
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow