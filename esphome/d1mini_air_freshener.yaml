substitutions:
  board_name: d1mini_air_freshener
  node_name: d1mini-air-freshener
  
esphome:
  name: ${node_name}
  comment: D1 Mini Air Freshener
  # on_boot:
  #   then:
  #   - sensor.template.publish:
  #       id: id_new_canister_sensor
  #       state: !lambda return id(id_canister_replace).state;
  #   - text_sensor.template.publish:
  #       id: id_new_canister_time_text
  #       state: !lambda |-
  #                   char str[30];
  #                   time_t currTime = id(id_canister_replace).state;
  #                   strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
  #                   return  { str };
  #   - component.update: id_refill_remaining
  #   - component.update: id_days_in_use

safe_mode:
  disabled: False
  num_attempts: 5
  reboot_timeout: 15min

esp8266:
  board: d1_mini
  restore_from_flash: true

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_pass
  domain: !secret my_domain
  reboot_timeout: 15min
  #fast_connect: true
  #output_power: 17.5dB
  #power_save_mode: none
  #use_address: 192.168.1.98
  # manual_ip:
  #   static_ip: 192.168.1.98
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8

logger:
  baud_rate: 0
  esp8266_store_log_strings_in_flash: false
  
api:
  reboot_timeout: 0s

ota:
  - platform: esphome
  
web_server:
  port: 80

binary_sensor:
  - platform: status
    name: ${board_name}_Status

  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: true
    name: ${board_name}_Button
    id: id_button
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_click:
      then:
        - switch.turn_on: spray
        - light.turn_off: id_green_led
    on_multi_click:
      - timing:
          - ON for 1s to 2s
          - OFF for at least 0.5s
        then:
          - button.press: id_button_reset
          - light.turn_off: id_green_led

  # - platform: gpio
  #   pin:
  #     number: GPIO12
  #     mode: INPUT_PULLUP
  #     inverted: true
  #   name: ${board_name}_Canister
  #   id: can_presence
  #   filters:
  #     - delayed_on: 10ms
  #     - delayed_off: 10ms
  #   on_press:
  #     then: 
  #       - light.turn_off: id_red_led
  #   on_release:
  #     then: 
  #       - light.turn_on:
  #             id: id_red_led
  #             effect: "Blink"
  
  # - platform: template
  #   name: ${board_name}_Occupancy
  #   device_class: occupancy
  #   lambda: |-
  #     if (id(id_distance).state > 0.1) {
  #       return true;
  #     } else {
  #       return false;
  #     }      

number:
  - platform: template
    name: ${board_name}_Counter
    icon: mdi:counter
    id: id_counter
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 3000
    step: 1
    optimistic: true
    on_value:
      then:
        - component.update: id_canister_left

  - platform: template
    name: ${board_name}_Canister_Resource
    icon: mdi:counter
    id: id_canister_resource
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 3000
    step: 1
    optimistic: true
    on_value:
      then:
        - component.update: id_canister_left

  - platform: template
    name: ${board_name}_Canister_Replace
    icon: mdi:counter
    id: id_canister_replace
    restore_value: true
    update_interval: 30s
    min_value: -2147483648
    max_value: 2147483647
    step: 1
    optimistic: true
    internal: true

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: ${board_name}_IP
    ssid:
      name: ${board_name}_SSID
    bssid:
      name: ${board_name}_BSSID
    mac_address:
      name: ${board_name}_Mac
    # scan_results:
    #   name: ${board_name}_Latest_Scan_Results

  - platform: version
    name: ${board_name}_ESPHome_Version
    hide_timestamp: true

  - platform: template
    name: ${board_name}_New_Canister_Time
    icon: mdi:clock-start
    id: id_new_canister_time_text

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: template
    name: ${board_name}_Canister_Left
    id: id_canister_left
    lambda: |-
      float raw_value = id(id_counter).state;
      float max_value = id(id_canister_resource).state;
      return ( 100 * (1 - raw_value/max_value));
    update_interval: 30s
    unit_of_measurement: '%'
    on_value_range:
      - below: 5
        then:
          - light.turn_on:    
              id: id_red_led
              effect: "Blink"
      - above: 5
        then:
          - light.turn_off: id_red_led

  - platform: template
    name: ${board_name}_New_Canister_Sensor
    id: id_new_canister_sensor
    update_interval: 60s
    accuracy_decimals: 0
    internal: false

  # - platform: template
  #   name: ${board_name}_Refill_Remaining
  #   icon: mdi:clock-end
  #   id: id_refill_remaining
  #   unit_of_measurement: "days"
  #   update_interval: 60s
  #   accuracy_decimals: 0
  #   lambda: |-
  #     auto time = id(sntp_time).now();
  #     if (!time.is_valid())
  #     {
  #       return {};
  #     }
    
  #     auto count = id(id_counter).state;
  #     auto refill = id(id_canister_resource).state;
      
  #     if (count == 0)
  #     {
  #       return {};
  #     }
    
  #     auto s_time = id(id_new_canister_time_text).state.c_str();
  #     tm stime = {0};
  #     strptime(s_time, "%Y-%m-%d %H:%M", &stime);
    
  #     char c_time[20];
  #     strftime(c_time, sizeof(c_time), "%Y-%m-%d %H:%M", localtime(&time.timestamp));
  #     tm ctime = {0};
  #     strptime(c_time, "%Y-%m-%d %H:%M", &ctime);
    
  #     time_t startTime = mktime(&stime);
  #     time_t currTime = mktime(&ctime);;
  #     time_t diff = difftime(currTime, startTime);
      
  #     return max(0, int(((diff / count) * (refill - count)) / 86400));

  - platform: template
    name: ${board_name}_Days_in_Use
    icon: mdi:clock-end
    id: id_days_in_use
    update_interval: 60s
    unit_of_measurement: "days"
    accuracy_decimals: 0
    lambda: |-
      auto time = id(sntp_time).now();
      if (!time.is_valid())
      {
        return {};
      }
    
      auto count = id(id_counter).state;
      auto refill = id(id_canister_resource).state;
      
      if (count == 0)
      {
        return {};
      }
    
      auto s_time = id(id_new_canister_time_text).state.c_str();
      tm stime = {0};
      strptime(s_time, "%Y-%m-%d %H:%M", &stime);
    
      char c_time[20];
      strftime(c_time, sizeof(c_time), "%Y-%m-%d %H:%M", localtime(&time.timestamp));
      tm ctime = {0};
      strptime(c_time, "%Y-%m-%d %H:%M", &ctime);
    
      time_t startTime = mktime(&stime);
      time_t currTime = mktime(&ctime);;
      time_t diff = difftime(currTime, startTime);
      
      return max(0, int(diff / 86400));

button:
  - platform: restart
    name: ${board_name}_Restart

  - platform: template
    name: ${board_name}_New_Canister
    id: id_button_reset
    on_press:
      - number.set:
          id: id_counter
          value: 0
      - number.set:
          id: id_canister_replace
          value: !lambda 'return int(id(sntp_time).now().timestamp);'
      - sensor.template.publish:
          id: id_new_canister_sensor
          state: !lambda 'return id(sntp_time).now().timestamp;'
      - text_sensor.template.publish:
          id: id_new_canister_time_text
          state: !lambda |-
                      char str[30];
                      time_t currTime = id(sntp_time).now().timestamp;
                      strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
                      return  { str };
      #- component.update: id_refill_remaining
      - component.update: id_days_in_use

  - platform: template
    name: ${board_name}_Spray
    id: id_button_spray
    on_press:
      - switch.turn_on: spray

switch:
  - platform: gpio
    pin:
      number: GPIO15
    name: ${board_name}_Spray
    id: spray
    icon: mdi:sprinkler
    restore_mode: ALWAYS_OFF
    internal: true
    on_turn_on:
      then:  
        - number.set:
            id: id_counter
            value: !lambda |-
              return ((id(id_counter).state)+1);
        - component.update: id_counter
        - delay: 100ms
        - switch.turn_off: spray
        
output:
  - platform: esp8266_pwm
    id: output_led1
    pin: GPIO00
    inverted: true

  - platform: esp8266_pwm
    id: output_led2
    pin: GPIO02
    inverted: true

light:
  - platform: monochromatic
    name: ${board_name}_LED_Green
    output: output_led1
    id: id_green_led
    effects:
      - automation:
          name: "Blink"
          sequence:
            - light.turn_on:
                id: id_green_led
                brightness: 50%
                transition_length: 500ms
            - delay: 1000ms
            - light.turn_on:
                id: id_green_led
                brightness: 1%
                transition_length: 300ms
            - delay: 500ms
      - automation:
          name: "Blink Fast"
          sequence:
            - light.turn_on:
                id: id_green_led
                brightness: 50%
                transition_length: 50ms
            - delay: 450ms
            - light.turn_on:
                id: id_green_led
                brightness: 1%
                transition_length: 50ms
            - delay: 450ms    

  - platform: monochromatic
    name: ${board_name}_LED_Red
    output: output_led2
    id: id_red_led
    effects:
      - automation:
          name: "Blink"
          sequence:
            - light.turn_on:
                id: id_red_led
                brightness: 50%
                transition_length: 500ms
            - delay: 1000ms
            - light.turn_on:
                id: id_red_led
                brightness: 1%
                transition_length: 300ms
            - delay: 500ms
      - automation:
          name: "Blink Fast"
          sequence:
            - light.turn_on:
                id: id_red_led
                brightness: 50%
                transition_length: 50ms
            - delay: 450ms
            - light.turn_on:
                id: id_red_led
                brightness: 1%
                transition_length: 50ms
            - delay: 450ms

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow