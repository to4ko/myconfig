substitutions:
  board_name: d1mini_air_freshener
  node_name: d1mini-air-freshener

esphome:
  name: ${node_name}
  comment: "D1 Mini Air Freshener"
  friendly_name: "D1 Mini Air Freshener"
  area: "Toilet"

safe_mode:
  disabled: false
  num_attempts: 5
  reboot_timeout: 15min

esp8266:
  board: d1_mini
  restore_from_flash: true

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_pass
  reboot_timeout: 15min

logger:
  baud_rate: 0
  esp8266_store_log_strings_in_flash: false

api:
  reboot_timeout: 0s

ota:
  - platform: esphome

web_server:
  port: 80

globals:
  - id: puffs_per_day_avg
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: last_canister_replace
    type: unsigned long
    restore_value: yes
    initial_value: '0'

  - id: g_new_canister_sensor
    type: unsigned long
    restore_value: true
    initial_value: '0'

binary_sensor:
  - platform: status
    name: "Status"

  - platform: gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: true
    name: "Button"
    id: id_button
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_click:
      then:
        - switch.turn_on: spray
        - light.turn_off: id_green_led
    on_multi_click:
      - timing:
          - ON for 1s to 2s
          - OFF for at least 0.5s
        then:
          - button.press: id_button_reset
          - light.turn_off: id_green_led

number:
  - platform: template
    name: "Counter"
    icon: mdi:counter
    id: id_counter
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 3000
    step: 1
    optimistic: true
    on_value:
      then:
        - component.update: id_canister_left

  - platform: template
    name: "Canister Resource"
    icon: mdi:counter
    id: id_canister_resource
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 3000
    step: 1
    optimistic: true
    on_value:
      then:
        - component.update: id_canister_left

  - platform: template
    name: "Days in Use Adjustment"
    icon: mdi:counter
    id: id_days_in_use_adjustment
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 3000
    step: 1
    optimistic: true
    on_value:
      then:
        - component.update: id_days_in_use

  - platform: template
    name: "Canister Replace"
    icon: mdi:counter
    id: id_canister_replace
    restore_value: true
    update_interval: 30s
    min_value: -2147483648
    max_value: 2147483647
    step: 1
    optimistic: true
    internal: true

text_sensor:
  - platform: template
    name: "Uptime"
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: "IP"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "MAC"

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

  # - platform: template
  #   name: ${board_name}_New_Canister_Time
  #   icon: mdi:clock-start
  #   id: id_new_canister_time_text

  - platform: template
    name: "New Canister Time"
    id: id_new_canister_time_text
    lambda: |-
      char str[30];
      time_t t = id(last_canister_replace);
      if (t == 0)
        return {};  // означает "нет значения"
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&t));
      return std::string(str);


sensor:
  - platform: uptime
    name: "Uptime s"
    id: uptime_sensor
    update_interval: 15s
    disabled_by_default: true

  - platform: wifi_signal
    name: "WiFi RSSI"
    update_interval: 60s

  - platform: template
    name: "Canister Left"
    id: id_canister_left
    lambda: |-
      float raw_value = id(id_counter).state;
      float max_value = id(id_canister_resource).state;
      return ( 100 * (1 - raw_value/max_value));
    update_interval: 30s
    unit_of_measurement: '%'
    on_value_range:
      - below: 5
        then:
          - light.turn_on:
              id: id_red_led
              effect: "Blink"
      - above: 5
        then:
          - light.turn_off: id_red_led

  - platform: template
    name: "New Canister Sensor"
    id: id_new_canister_sensor
    unit_of_measurement: "s"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: |-
      return (float) id(g_new_canister_sensor);


  - platform: template
    name: "Days in Use"
    icon: mdi:clock-end
    id: id_days_in_use
    update_interval: 60s
    unit_of_measurement: "days"
    accuracy_decimals: 1
    lambda: |-
      auto time = id(sntp_time).now();
      if (!time.is_valid()) {
        return {};
      }
      auto replace_time = id(id_canister_replace).state;
      if (replace_time <= 0) {
        return id(id_days_in_use_adjustment).state;  // возвращаем только корректировку
      }
      float adjustment = id(id_days_in_use_adjustment).state;
      if (std::isnan(adjustment)) {
        adjustment = 0.0;
      }
      return (time.timestamp - replace_time) / 86400.0 + adjustment;

  - platform: template
    name: "Days Remaining"
    icon: mdi:calendar-clock
    id: id_days_remaining
    unit_of_measurement: "days"
    update_interval: 60s
    accuracy_decimals: 1
    lambda: |-
      float days_in_use = id(id_days_in_use).state;
      float total_puffs = id(id_counter).state;
      float canister_total = id(id_canister_resource).state;

      if (days_in_use <= 0 || total_puffs <= 0) {
        // Если ещё не было использования — вернём приблизительный срок
        if (canister_total > 0) {
          return canister_total / 83.0;  // оценка по 83 пшика в день
        }
        return 0.0;
      }

      // среднее число пшиков в день
      float current_puffs_per_day = total_puffs / days_in_use;
      if (std::isnan(current_puffs_per_day) || current_puffs_per_day <= 0) {
        current_puffs_per_day = 1.0;  // защита от деления на ноль
      }

      // скользящее среднее для сглаживания
      id(puffs_per_day_avg) = id(puffs_per_day_avg) * 0.8 + current_puffs_per_day * 0.2;

      float remaining_puffs = canister_total - total_puffs;
      if (remaining_puffs < 0) remaining_puffs = 0;

      if (std::isnan(id(puffs_per_day_avg)) || id(puffs_per_day_avg) <= 0) {
        return remaining_puffs;  // пока нет среднего — просто пшики
      }

      return remaining_puffs / id(puffs_per_day_avg);

button:
  - platform: restart
    name: "Restart"

  - platform: template
    name: "New Canister"
    id: id_button_reset
    on_press:
      - number.set:
          id: id_counter
          value: 0
      - number.set:
          id: id_days_in_use_adjustment
          value: 0          
      - lambda: |-
          id(last_canister_replace) = id(sntp_time).now().timestamp;
      - number.set:
          id: id_canister_replace
          value: !lambda 'return int(id(sntp_time).now().timestamp);'
      - globals.set:
          id: g_new_canister_sensor
          value: !lambda 'return (unsigned long) id(sntp_time).now().timestamp;'
      - component.update: id_new_canister_sensor          
      - component.update: id_days_in_use
      - component.update: id_new_canister_time_text

  - platform: template
    name: "Spray"
    id: id_button_spray
    on_press:
      - switch.turn_on: spray

switch:
  - platform: gpio
    pin:
      number: GPIO15
    name: "Spray"
    id: spray
    icon: mdi:sprinkler
    restore_mode: ALWAYS_OFF
    internal: true
    on_turn_on:
      then:
        - number.set:
            id: id_counter
            value: !lambda |-
              return ((id(id_counter).state)+1);
        - component.update: id_counter
        - delay: 100ms
        - switch.turn_off: spray

output:
  - platform: esp8266_pwm
    id: output_led1
    pin: GPIO00
    inverted: true

  - platform: esp8266_pwm
    id: output_led2
    pin: GPIO02
    inverted: true

light:
  - platform: monochromatic
    name: "LED Green"
    output: output_led1
    id: id_green_led
    effects:
      - automation:
          name: "Blink"
          sequence:
            - light.turn_on:
                id: id_green_led
                brightness: 50%
                transition_length: 500ms
            - delay: 1000ms
            - light.turn_on:
                id: id_green_led
                brightness: 1%
                transition_length: 300ms
            - delay: 500ms
      - automation:
          name: "Blink Fast"
          sequence:
            - light.turn_on:
                id: id_green_led
                brightness: 50%
                transition_length: 50ms
            - delay: 450ms
            - light.turn_on:
                id: id_green_led
                brightness: 1%
                transition_length: 50ms
            - delay: 450ms

  - platform: monochromatic
    name: "LED Red"
    output: output_led2
    id: id_red_led
    effects:
      - automation:
          name: "Blink"
          sequence:
            - light.turn_on:
                id: id_red_led
                brightness: 50%
                transition_length: 500ms
            - delay: 1000ms
            - light.turn_on:
                id: id_red_led
                brightness: 1%
                transition_length: 300ms
            - delay: 500ms
      - automation:
          name: "Blink Fast"
          sequence:
            - light.turn_on:
                id: id_red_led
                brightness: 50%
                transition_length: 50ms
            - delay: 450ms
            - light.turn_on:
                id: id_red_led
                brightness: 1%
                transition_length: 50ms
            - delay: 450ms

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow

interval:
  - interval: 1min
    then:
      - component.update: id_days_remaining
      - component.update: id_days_in_use