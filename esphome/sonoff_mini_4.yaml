substitutions:
  board_name: sonoff_mini_4
  node_name: sonoff-mini-4

esphome:
  name: ${node_name}
  comment: "Sonoff Mini 4 Work Light R"
  friendly_name: "Sonoff Mini 4"
  area: "Kitchen"
  on_boot:
    if:
      condition:
        wifi.connected:
      then:
        - light.turn_on: wifi_led

safe_mode:
  disabled: False
  num_attempts: 5
  reboot_timeout: 15min

esp8266:
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_pass
  domain: !secret my_domain
  reboot_timeout: 15min
  #output_power: 17.5dB
  #fast_connect: true
  #power_save_mode: none
  # manual_ip:
  #   static_ip: 192.168.1.55
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:
  - platform: esphome

web_server:
  port: 80

output:
  - platform: gpio
    id: manual_status_led
    pin: 
      number: GPIO13
      inverted: false
  - platform: gpio
    id: light_output
    pin: GPIO12


light:
  - platform: binary
    name: "Status LED"
    internal: true
    output: manual_status_led
    id: wifi_led

  - platform: binary
    name: "LED"
    output: light_output
    icon: mdi:spotlight
    id: light_1

binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_press:
      - light.toggle: light_1

  - platform: gpio
    name: "Switch"
    pin: 
      number: GPIO04
      inverted: true
    id: switch_1
    filters:
      - delayed_on: 30ms
      - delayed_off: 30ms    
    on_press:
      then:
        - light.toggle: light_1

  - platform: status
    name: "Status"

# switch:
#   - platform: gpio
#     "Relay"
#     pin: GPIO12
#     id: relay
#     icon: mdi:spotlight

sensor:
  - platform: uptime
    name: "Uptime s"
    id: uptime_sensor
    disabled_by_default: true

  - platform: wifi_signal
    name: "WiFi RSSI"
    update_interval: 60s

text_sensor:
  - platform: template
    name: "Uptime"
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: "IP"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "MAC"
    # scan_results:
    #   name: "Latest Scan Results"

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

button:
  - platform: restart
    name: "Restart"
    
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow