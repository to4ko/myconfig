substitutions:
  board_name: Sonoff_MINIR4_Kiosk_Charger
  host_name: sonoff-mini-r4-kiosk-charger

esphome:
  name: ${host_name}
  comment: "Sonoff MiniR4 Wallpanel Charger"
  friendly_name: "Sonoff MiniR4 Kiosk Charger"
  area: "Hall big"
  on_boot:
    priority: -10
    then:
    # on affter boot
    - switch.turn_on: relay

safe_mode:
  disabled: False
  num_attempts: 5
  reboot_timeout: 15min

esp32:
  board: esp32dev
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_pass
  domain: !secret my_domain
  reboot_timeout: 15min
  #output_power: 17.5dB
  #fast_connect: true
  #use_address: 192.168.1.164
  #power_save_mode: none
  # manual_ip:
  #   static_ip: 192.168.1.117
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8

# http_request:
#   id: http_request_data
#   verify_ssl: false

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:
  - platform: esphome

web_server:
  port: 80

output:
  - platform: gpio
    id: manual_status_led
    pin: 
      number: GPIO19
      inverted: true

light:
  - platform: binary
    name: "Status LED"
    internal: true
    output: manual_status_led
    id: wifi_led

number:
  - platform: template
    name: "MaxLevel"
    icon: mdi:arrow-collapse-up
    id: id_max_level
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true

  - platform: template
    name: "MinLevel"
    icon: mdi:arrow-collapse-down
    id: id_min_level
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true

binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    name: "Button"
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    # on_press:
    #   - switch.toggle: 
    #       id: relay

  - platform: status
    name: "Status"

  - platform: template
    name: "Auto Mode"
    id: id_auto_mode

  # - platform: homeassistant
  #   name: ${board_name}_tod
  #   id: id_tod
  #   entity_id: binary_sensor.tod_day
  #   internal: false
  #   publish_initial_state: true

  - platform: template
    name: "ToD"
    id: id_tod
    icon: mdi:chart-timeline

  - platform: homeassistant
    name: "Security"
    entity_id: switch.system_security_mode
    id: id_security
    internal: false
    trigger_on_initial_state: true

switch:
  - platform: gpio
    name: "Relay"
    pin: GPIO26
    id: relay

  - platform: template
    name: "Always On"
    optimistic: true
    id: id_always_on
    on_turn_on:
      - binary_sensor.template.publish:
          id: id_auto_mode
          state: OFF
      - switch.turn_on: relay
    on_turn_off:
      - binary_sensor.template.publish:
          id: id_auto_mode
          state: OFF    

sensor:
  - platform: uptime
    name: "Uptime s"
    id: uptime_sensor
    disabled_by_default: true

  - platform: wifi_signal
    name: "WiFi RSSI"
    update_interval: 60s

  - platform: homeassistant
    name: "People"
    entity_id: sensor.people_home
    id: id_people_home
    internal: false

  # - platform: template
  #   name: ${board_name}_Battery_Level

  - platform: homeassistant
    name: "Battery Level"
    entity_id: sensor.kiosk_battery    
    id: id_battery
    device_class: battery
    state_class: measurement
    unit_of_measurement: '%'
    internal: false
    # on_value:
    #   - logger.log: "------> Battery On_Value"
    #   - if:
    #       condition:
    #           - binary_sensor.is_on: id_auto_mode
    #       then:
    #         - logger.log: "------> Battery On_Value - Auto mode ON"
    #         - if:
    #             condition:
    #               - binary_sensor.is_on: id_tod
    #             then:
    #               - logger.log: "------> Auto ON and TOD ON"
    #               - if:
    #                   condition:
    #                     and:
    #                       - lambda: "return id(id_battery).state <= id(id_min_level).state;"
    #                       - switch.is_off: relay
    #                   then:
    #                     - logger.log: "------> Battery Level < Min! Turn Relay ON"
    #                     - switch.turn_on: relay
    #                   else:
    #                     - logger.log: "------> Battery Level NOT lower than Min. Checking if Higher than Max"
    #                     - if:
    #                         condition:
    #                           and:
    #                             - lambda: "return id(id_battery).state >= id(id_max_level).state ;"
    #                             - switch.is_on: relay
    #                         then:
    #                           - logger.log: "------> Battery Level > Max! Turn Relay OFF"
    #                           - switch.turn_off: relay
    #                         else:
    #                           - logger.log: "------> Battery Level NOT lower than Min and Not Higher than Max"
    #             else:
    #               - logger.log: "------> Auto ON and TOD OFF"
    #               - switch.turn_on: relay
    #       else:
    #         - logger.log: "------> Battery On_Value - Auto Mode Off"
    #         - if: 
    #             condition:
    #               - switch.is_off: relay
    #             then:
    #               - logger.log: "------> Auto Mode OFF and Relay OFF -> Turn Relay ON"
    #               - switch.turn_on: relay

text_sensor:
  - platform: template
    name: "Uptime"
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: "IP"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "MAC"
    # scan_results:
    #   name: "Latest Scan Results"

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

button:
  - platform: restart
    name: "Restart"

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow

interval:
  - interval: 15s
    then:
      - logger.log: "------> Interval 15s - Check for Mode"
      - if:
          condition:
            and:
              - binary_sensor.is_off: id_security
              - switch.is_on: id_always_on      
          then:
            - logger.log: "------> Interval 15s - Security OFF, Always_on ON -> Auto Turn OFF"
            - binary_sensor.template.publish:
                id: id_auto_mode
                state: OFF
          else:
            - logger.log: "------> Interval 15s - Auto Turn ON"
            - binary_sensor.template.publish:
                id: id_auto_mode
                state: ON

  - interval: 1min
    then:
      # - http_request.get:
      #     url: !secret kiosk_url
      #     capture_response: true
      #     headers:
      #       Content-Type: application/json
      #     on_response:
      #       then:
      #         # - lambda: |-
      #         #     json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
      #         #         id(id_battery).publish_state(root["batteryLevel"]);
      #         #     });

      #         - lambda: |-
      #             json::parse_json(body, [](JsonObject root) -> bool {
      #                 id(id_battery).publish_state(root["batteryLevel"]);
      #                 return true;
      #             });

      - if:
          condition:
              - lambda: "return id(id_min_level).state <= 20;"
          then:
            - number.set:
                id: id_min_level
                value: 25
      - if:
          condition:
              - lambda: "return id(id_max_level).state <= 50;"
          then:
            - number.set:
                id: id_max_level
                value: 80

  - interval: 30s
    then:
      - logger.log: "------> Interval 30s - TOD"
      - if:
          condition:
            or:
              - lambda: |-
                  return id(sntp_time).now().hour >= 21;
              - lambda: |-
                  return (id(sntp_time).now().hour >= 0 && id(sntp_time).now().hour < 7) ;
          then:
            - logger.log: "------> Interval 30s - TOD OFF - Night"
            - binary_sensor.template.publish:
                id: id_tod
                state: OFF
          else:
            - logger.log: "------> Interval 30s - TOD ON - Day"
            - binary_sensor.template.publish:
                id: id_tod
                state: ON
  
  - interval: 1min
    then:
      - logger.log: "------> Interval 10s - Battery Level"
      - if:
          condition:
              - binary_sensor.is_on: id_auto_mode
          then:
            - logger.log: "------> Battery Level - Auto mode ON"
            - if:
                condition:
                  - binary_sensor.is_on: id_tod
                then:
                  - logger.log: "------> Battery Level -> Auto ON and TOD ON"
                  - if:
                      condition:
                        and:
                          - lambda: "return id(id_battery).state <= id(id_min_level).state;"
                          - switch.is_off: relay
                      then:
                        - logger.log: "------> Battery Level - Battery Level < Min! Turn Relay ON"
                        - switch.turn_on: relay
                      else:
                        - logger.log: "------> Battery Level - Battery Level NOT lower than Min. Checking if Higher than Max"
                        - if:
                            condition:
                              and:
                                - lambda: "return id(id_battery).state >= id(id_max_level).state ;"
                                - switch.is_on: relay
                            then:
                              - logger.log: "------> Battery Level - Battery Level > Max! Turn Relay OFF"
                              - switch.turn_off: relay
                            else:
                              - logger.log: "------> Battery Level - Battery Level NOT lower than Min and Not Higher than Max"
                else:
                  - logger.log: "------> Auto ON and TOD OFF"
                  - switch.turn_on: relay
          else:
            - logger.log: "------> Battery Level - Auto Mode Off"
            - if: 
                condition:
                  - switch.is_off: relay
                then:
                  - logger.log: "------> Battery Level - Auto Mode OFF and Relay OFF -> Turn Relay ON"
                  - switch.turn_on: relay