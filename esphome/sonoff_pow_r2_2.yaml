substitutions:
  board_name: sonoff_pow_r2_2
  node_name: sonoff-pow-r2-2

esphome:
  name: ${node_name}
  comment: "Wall Heater T"
  friendly_name: "Sonoff POW R2 2"
  area: "Toilet"

safe_mode:
  disabled: False
  num_attempts: 5
  reboot_timeout: 15min

esp8266:
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_pass
  domain: !secret my_domain
  reboot_timeout: 15min
  #output_power: 17.5dB
  #fast_connect: true
  #power_save_mode: none
  # manual_ip:
  #   static_ip: 192.168.1.132
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8    

# Enable logging
logger:
  baud_rate: 0

uart:
  rx_pin: RX
  baud_rate: 4800
  parity: EVEN

api:
  reboot_timeout: 0s

ota:
  - platform: esphome

web_server:
  port: 80

i2c:
  sda: GPIO04
  scl: GPIO05
  scan: True

# status_led:
#   pin:
#     number: GPIO13
#     #inverted: yes

output:
  - platform: gpio
    id: blue_led
    pin: GPIO13
    inverted: True

light:
  - platform: binary
    name: "Status LED"
    internal: true
    output: blue_led
    id: main_led

climate:
  - platform: bang_bang
    visual:
      min_temperature: 19 °C
      max_temperature: 24 °C
      temperature_step: 1 °C  
    name: "Wall Heater"
    sensor: bme_temperature
    default_target_temperature_low: 20 °C
    default_target_temperature_high: 22 °C
    heat_action:
      - switch.turn_on: relay
    idle_action:
      - switch.turn_off: relay
    id: my_climate

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Button"
    on_press:
      - switch.toggle: relay
      
  - platform: status
    name: "Status"

  - platform: template
    name: "Alarm"
    id: template_bin_alarm
    filters:
      - delayed_off: 5s
    device_class: problem

switch:
  - platform: gpio
    name: "Relay"
    pin: GPIO12
    restore_mode: RESTORE_DEFAULT_ON
    id: relay
    icon: mdi:radiator

sensor:
  - platform: cse7766
    current:
      name: "Current"
      accuracy_decimals: 1
      device_class: current
      id: id_current
      filters:
        - throttle_average: 10s      
    voltage:
      name: "Voltage"
      accuracy_decimals: 1
      device_class: voltage
      id: id_voltage
      filters:
        - throttle_average: 10s      
    power:
      name: "Power"
      accuracy_decimals: 0
      id: id_power
      unit_of_measurement: W
      device_class: power
      filters:
        - throttle_average: 10s  

  - platform: integration
    name: "Energy"
    sensor: id_power
    time_unit: h
    accuracy_decimals: 3
    unit_of_measurement: 'kWh'
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.001
    id: id_energy
    restore: true

  - platform: bme280_i2c
    temperature:
      name: "Temperature"
      oversampling: 16x
      id: bme_temperature
      on_value:
        then:
          - if:
              condition:
                lambda: 'return ((id(bme_temperature).state - id(my_climate).target_temperature_high) >= 1 );'
              then:
                - logger.log: " >>> The bme above target high"
                - text_sensor.template.publish:
                    id: template_text_log
                    state: "The bme above target high"                
                - if:
                    condition:
                      switch.is_on: relay
                    then:
                      - binary_sensor.template.publish:
                          id: template_bin_alarm
                          state: ON                  
                      - logger.log: " >>> Switching off relay"
                      - text_sensor.template.publish:
                          id: template_text_log
                          state: "Switching off relay"    
                      - switch.turn_off: relay
              else:
                - logger.log: " >>> The bme below target high"
                - text_sensor.template.publish:
                    id: template_text_log
                    state: "The bme below target high"
                - binary_sensor.template.publish:
                    id: template_bin_alarm
                    state: OFF                
    pressure:
      name: "Pressure"
      id: bme_pressure
    humidity:
      name: "Humidity"
      id: bme_humidity
      filters:
        - offset: 11.0      
    address: 0x77
    update_interval: 15s
    
  - platform: uptime
    name: "Uptime s"
    id: uptime_sensor
    disabled_by_default: true
    
  - platform: wifi_signal
    name: "WiFi RSSI"
    update_interval: 60s

text_sensor:
  - platform: template
    name: "Uptime"
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: template
    name: ${board_name}_Log
    id: template_text_log

  - platform: wifi_info
    ip_address:
      name: "IP"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "MAC"
    # scan_results:
    #   name: "Latest Scan Results"

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

button:
  - platform: restart
    name: "Restart"
    
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow