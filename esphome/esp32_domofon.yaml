substitutions:
  board_name: esp32_domofon
  node_name: esp32-domofon
 
esphome:
  name: $node_name
  comment: ESP32 Pico Domofon
  # platformio_options:
  #   board_build.partitions: ../../../custom_components/partitions_esp32_4mb.csv
  #restore_from_flash: true
  on_boot:
    priority: -100
    then:
      - script.execute: state_standby

safe_mode:
  disabled: False
  num_attempts: 5
  reboot_timeout: 15min

esp32:
  board: pico32
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_pass
  domain: !secret my_domain
  reboot_timeout: 15min
  #output_power: 17.5dB
  #fast_connect: true
  #power_save_mode: none
  # manual_ip:
  #   static_ip: 192.168.1.81
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8
    
logger:
#  baud_rate: 0

api:
  reboot_timeout: 0min

ota:
  - platform: esphome

web_server:
  port: 80

globals:
  - id: mode_mute
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: opening
    type: bool
    initial_value: 'false'

script:
  # Accept incoming call
  - id: call_accept
    then:
      - globals.set:
          id: opening
          value: 'true'      
      - logger.log: "Accept call"
      - script.execute: state_standby
      - switch.turn_on: id_phone
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s      
      - switch.turn_off: id_open      
      - switch.turn_off: id_phone
      - globals.set:
          id: opening
          value: 'false'
      - script.execute: state_standby

  - id: call_accept_mute
    then:
      - globals.set:
          id: opening
          value: 'true'      
      - logger.log: "Accept call_mute"
      - script.execute: state_standby
      - switch.turn_on: id_mute
      - switch.turn_on: id_phone
      - switch.turn_on: id_headset_mute
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s
      - switch.turn_off: id_open
      - switch.turn_off: id_phone
      - delay: 1s
      - if:
          condition:
            switch.is_off: mute
          then:
            switch.turn_off: id_mute
      - switch.turn_off: id_headset_mute
      - globals.set:
          id: opening
          value: 'false'
      - script.execute: state_standby
          
  - id: call_accept_manual
    then:
      - logger.log: "Accept call_manual"
      #- script.execute: state_standby
      - script.execute: led_off
      - light.turn_on:
          id: id_led1
          brightness: 100%
          red: 100%
          green: 100%
          blue: 0%
      - switch.turn_on: id_phone
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s
      - switch.turn_off: id_open
      - switch.turn_off: id_phone
      - delay: 1s
      - if:
          condition:
            switch.is_off: mute
          then:
            switch.turn_off: id_mute
      - switch.turn_off: id_headset_mute
      - script.execute: state_standby

  - id: call_reject
    then:
      - logger.log: "Reject call"
      - script.execute: state_standby
      - switch.turn_on: id_mute
      - switch.turn_on: id_headset_mute
      - switch.turn_on: id_phone
      - delay: 3s
      - switch.turn_off: id_phone
      - delay: 1s
      - if:
          condition:
            switch.is_off: mute
          then:
            switch.turn_off: id_mute
      - switch.turn_off: id_headset_mute

  # change light with locks
  # - id: locks_lights
  #   then:
  #     - logger.log: "Lock Lights"
  #     - if:
  #         condition:
  #           and:
  #             - binary_sensor.is_on: id_bottom_lock
  #             - binary_sensor.is_on: id_top_lock
  #         then:
  #           light.turn_on:
  #             id: id_led1
  #             brightness: 25%
  #             red: 100%
  #             green: 65%
  #             blue: 0%
  #     - if:
  #         condition:
  #           and:
  #             - binary_sensor.is_on: id_bottom_lock
  #             - binary_sensor.is_off: id_top_lock
  #         then:
  #           light.turn_on:
  #             id: id_led1
  #             brightness: 25%
  #             red: 100%
  #             green: 65%
  #             blue: 0%          
  #             effect: 'Blink'
  #     - if:
  #         condition:
  #           and: 
  #             - binary_sensor.is_off: id_bottom_lock
  #             - binary_sensor.is_on: id_top_lock
  #         then:
  #           light.turn_on:
  #             id: id_led1
  #             brightness: 25%
  #             red: 100%
  #             green: 65%
  #             blue: 0%
  #     - if:
  #         condition:
  #           and:
  #             - binary_sensor.is_on: id_bottom_lock
  #             - binary_sensor.is_on: id_top_lock
  #         then:
  #           light.turn_off:
  #             id: id_led1

  # State - Standby
  - id: state_standby
    then:
      - logger.log: "Set state 'Standby'"
      - script.execute: led_off
      - if:
          condition:
            switch.is_on: auto_open_once
          then:
            script.execute: led_green_blink
      - if:
          condition:
            switch.is_on: auto_open
          then:
            script.execute: led_green_on
      - if:
          condition:
            switch.is_on: auto_reject
          then:
            script.execute: led_red_blink
      - if:
          condition:
            and:
              - switch.is_on: mute
              - switch.is_off: auto_open_once
              - switch.is_off: auto_open
          then:
            script.execute: led_blue_blink
      - if:
          condition:
            and:
              - switch.is_off: auto_open_once
              - switch.is_off: auto_open
              - switch.is_off: auto_reject
          then:
            script.execute: led_off

  # Call state
  - id: state_call
    then:
      - logger.log: "Set state 'Incoming call'"
      - script.execute: led_off
      - if:
          condition:
            and:
              - switch.is_off: auto_open
              - switch.is_off: auto_open_once
              - switch.is_off: auto_reject
              - switch.is_on: mute
          then:
            script.execute: led_red_on
      - if:
          condition:
            switch.is_on: auto_reject
          then:
            script.execute: call_reject
      - if:
          condition:
            switch.is_on: auto_open
          then:
            script.execute: call_accept
      - if:
          condition:
            switch.is_on: auto_open_once
          then:
            - script.execute: call_accept    
            - delay: 1s
            - switch.turn_off: auto_open_once

  # Turn off leds
  - id: led_off
    then:
      - light.turn_off: id_led1
      - if:
          condition:
            switch.is_on: mute
          then:
            - logger.log: "Blue ON from led off"
            - light.turn_on: 
                id: id_led1
                brightness: 20%
                red: 0%
                green: 0%
                blue: 100%
                effect: "Blink"

  - id: led_green_blink_double
    then:
      light.turn_on:
        id: id_led1
        brightness: 20%
        red: 0%
        green: 100%
        blue: 0%
        effect: "Blink Double"

  - id: led_red_blink_double
    then:
      light.turn_on:
          id: id_led1
          brightness: 20%
          red: 100%
          green: 0%
          blue: 0%
          effect: "Blink Double"

  - id: led_blue_blink_double
    then:
      - light.turn_on:
          id: id_led1
          brightness: 20%
          red: 0%
          green: 0%
          blue: 100%
          effect: "Blink Double"

  - id: led_green_blink
    then:
      light.turn_on:
        id: id_led1
        brightness: 20%
        red: 0%
        green: 100%
        blue: 0%
        effect: "Blink"

  - id: led_red_blink
    then:
      light.turn_on:
          id: id_led1
          brightness: 20%
          red: 100%
          green: 0%
          blue: 0%
          effect: "Blink"

  - id: led_blue_blink
    then:
      - light.turn_on:
          id: id_led1
          brightness: 20%
          red: 0%
          green: 0%
          blue: 100%
          effect: "Blink"

  - id: led_blue_on
    then:
      - light.turn_on:
          id: id_led1
          brightness: 20%
          red: 0%
          green: 0%
          blue: 100%

  - id: led_green_on
    then:
      light.turn_on:
        id: id_led1
        brightness: 20%
        red: 0%
        green: 100%
        blue: 0%

  - id: led_red_on
    then:
      light.turn_on:
        id: id_led1
        brightness: 20%
        red: 100%
        green: 0%
        blue: 0%

binary_sensor:
  - platform: status
    name: ${board_name}_Status
    
  - platform: gpio
    pin: 
      number: GPIO33
      mode: INPUT_PULLUP
      inverted: True
    name: ${board_name}_IncomingCall
    device_class: sound
    id: incoming_call
    filters:
      - delayed_on: 1s
      - delayed_off: 3s
    on_press:
      then:
        - script.execute: state_call
    on_release:
      then:
        - delay: 10s
        - script.execute: state_standby
    

  - platform: template
    name: ${board_name}_Auto_Opening
    lambda: |-
      if (id(opening)) { return true;
      }else { return false;
      }

  - platform: gpio
    name: ${board_name}_Button
    pin: 
      number: GPIO22
      mode: INPUT_PULLDOWN
      #inverted: true
    filters:
      - delayed_on: 50ms
      # - delayed_off: 25ms   
    on_press:
      if:
        condition:
          not:
            script.is_running: call_accept_manual
        then:
          - logger.log: "--------> Manual Open - OK"
          - script.execute: call_accept_manual
        else:
          - logger.log: "--------> Manual Open - Not OK"

  # - platform: homeassistant
  #   name: ${board_name}_bottom_lock
  #   internal: true
  #   entity_id: binary_sensor.bottom_lock #binary_sensor.0x00158d0002a1a4b2_contact
  #   id: id_bottom_lock
  #   #filters:
  #   #  - invert:    
  #   on_state:
  #     then:
  #       - script.execute: locks_lights

  # - platform: homeassistant
  #   name: ${board_name}_top_lock
  #   internal: true
  #   entity_id: binary_sensor.top_lock #binary_sensor.0x00158d0002b7c2c8_contact
  #   id: id_top_lock
  #   #filters:
  #   #  - invert:    
  #   on_state:
  #     then:
  #       - script.execute: locks_lights

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO21
    num_leds: 1
    chipset: ws2812
    name: ${board_name}_LED
  # - platform: neopixelbus
  #   type: GRB
  #   variant: WS2812
  #   pin: GPIO21
  #   num_leds: 1
  #   name: ${board_name}_LED
    id: id_led1
    effects:
      - automation:
          name: "Blink"
          sequence:
            - light.turn_on:
                id: id_led1
                brightness: 20%
                transition_length: 500ms
            - delay: 1000ms
            - light.turn_on:
                id: id_led1
                brightness: 1%
                transition_length: 300ms
            - delay: 500ms
      - automation:
          name: "Blink Double"
          sequence:
            - light.turn_on:
                id: id_led1
                brightness: 20%
                transition_length: 50ms
            - delay: 100ms
            - light.turn_on:
                id: id_led1
                brightness: 1%
                transition_length: 30ms
            - delay: 50ms
            - light.turn_on:
                id: id_led1
                brightness: 20%
                transition_length: 50ms
            - delay: 100ms
            - light.turn_on:
                id: id_led1
                brightness: 1%
                transition_length: 30ms
            - delay: 500ms            
      - automation:
          name: "Blink Fast"
          sequence:
            - light.turn_on:
                id: id_led1
                brightness: 20%
                transition_length: 50ms
            - delay: 450ms
            - light.turn_on:
                id: id_led1
                brightness: 1%
                transition_length: 50ms
            - delay: 450ms
      - automation:
          name: "Half"
          sequence:
            - light.turn_on:
                id: id_led1
                brightness: 20%
                transition_length: 50ms    

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: ${board_name}_IP
    ssid:
      name: ${board_name}_SSID
    bssid:
      name: ${board_name}_BSSID
    mac_address:
      name: ${board_name}_Mac
    # scan_results:
    #   name: ${board_name}_Latest_Scan_Results

  - platform: version
    name: ${board_name}_ESPHome_Version
    hide_timestamp: true

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s    

button:
  - platform: restart
    name: ${board_name}_Restart
    id: restart_button

switch:
  - platform: gpio
    pin: GPIO19
    internal: true
    name: ${board_name}_Mute_Pin
    icon: mdi:volume-off
    id: id_mute

  - platform: gpio
    pin: GPIO26
    internal: true
    name: ${board_name}_Phone_Pin
    icon: mdi:phone
    id: id_phone

  - platform: gpio
    pin: GPIO25
    internal: true
    name: ${board_name}_Open_Pin
    icon: mdi:door-open
    id: id_open
    on_turn_on:
      - delay: 1s
      - switch.turn_off: id_open

  - platform: gpio
    pin: GPIO18
    internal: true
    name: ${board_name}_Headset_Mute_Pin
    icon: mdi:headset-off
    id: id_headset_mute
  
  - platform: template
    name: ${board_name}_Open
    icon: mdi:door
    turn_on_action:
      - script.execute: call_accept_mute

  - platform: template
    name: ${board_name}_Open_Manual
    icon: mdi:hand-front-right
    id: manual_open
    turn_on_action:
      - script.execute: call_accept_manual

  - platform: template
    name: ${board_name}_Auto_Open
    id: auto_open
    icon: mdi:check-all
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - switch.turn_off: auto_open_once
      - switch.turn_off: auto_reject
      - script.execute: state_standby
    on_turn_off:
      - script.execute: state_standby

  - platform: template
    name: ${board_name}_Auto_Open_Once
    id: auto_open_once
    icon: mdi:check
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - switch.turn_off: auto_open
      - switch.turn_off: auto_reject
      - script.execute: state_standby
    on_turn_off:
      - script.execute: state_standby

  - platform: template
    name: ${board_name}_Reject
    id: auto_reject
    icon: mdi:door-closed-lock
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - switch.turn_off: auto_open
      - switch.turn_off: auto_open_once
      - script.execute: state_standby
    on_turn_off:
      - script.execute: state_standby
      
  - platform: template
    name: ${board_name}_Mute
    id: mute
    icon: mdi:volume-off
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - globals.set:
          id: mode_mute
          value: 'true'
      - switch.turn_on: id_mute
      - script.execute: state_standby
    on_turn_off:
      - globals.set:
          id: mode_mute
          value: 'false'
      - switch.turn_off: id_mute
      - script.execute: state_standby
      
number:
  - platform: template
    name: ${board_name}_LED_Brightness
    icon: "mdi:led-on"
    id: led_brightness
    optimistic: true
    restore_value: true
    entity_category: "config"
    initial_value: 20
    min_value: 0
    max_value: 100
    step: 1

time:
  - platform: sntp
    id: sntp_time
    timezone: UTC-3
    on_time:
      # Every 5 minutes
      - seconds: 0
        minutes: /1
        then:
            if:
              condition:
                for:
                  time: 2min
                  condition:
                    binary_sensor.is_on: incoming_call
              then:
                - homeassistant.service:
                    service: notify.telegram
                    data:
                      message: "Domofon Restart - Incoming stuck!"
                - script.execute: call_accept
                - delay: 00:00:05
                - button.press: restart_button