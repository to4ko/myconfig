substitutions:
  board_name: esp32_node_hs
  node_name: esp32-node-hs
 
esphome:
  name: ${node_name}
  comment: "ESP32 TPH Node HS"
  friendly_name: "ESP32 Node HS"
  area: "Hall Small"
  # platformio_options:
  #   board_build.partitions: ../../../custom_components/partitions_esp32_4mb.csv
  on_boot:
    - priority: 260
      then:
        - delay: 5s
        - ble.disable:

esp32_ble:
  enable_on_boot: False

safe_mode:
  disabled: False
  num_attempts: 5
  reboot_timeout: 15min

esp32:
  board: nodemcu-32s
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_pass
  domain: !secret my_domain
  reboot_timeout: 15min
  power_save_mode: none
  #output_power: 10dB
  #fast_connect: true
  #power_save_mode: none
  # manual_ip:
  #   static_ip: 192.168.1.38
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8

logger:
  level: info #baud_rate: 0
  logs:
    wifi: NONE
    esp-idf: NONE
  
api:
  reboot_timeout: 0s

ota:
  - platform: esphome

web_server:
  port: 80
  
binary_sensor:
  - platform: status
    name: "Status"
    
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: True

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO25
    num_leds: 174
    chipset: ws2812
    name: "LED"
  # - platform: neopixelbus
  #   variant: WS2812
  #   pin: GPIO25
  #   num_leds: ${num_leds}
  #   type: GRB
  #   name: "LED"
  #   method:
  #     type: esp32_rmt
  #     channel: 2
    id: light1
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:
      # - addressable_lambda:
      #     name: "Rise R2L"
      #     update_interval: 10ms
      #     lambda: |-
      #       static Color led[${num_leds}];
      #       static uint16_t progress = 0;
      #       static int middle = ${num_leds} / 2;

      #       const uint8_t speed = 1;
      #       const uint8_t steps = 100;

      #       const bool revers = false;
      #       const bool twoside = false;
      #       const bool fade = false;

      #       if (initial_run) 
      #       {
      #         ESP_LOGD("effect", "Rise and Fade x%i / %i", speed, steps);

      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           led[i] = fade ? current_color : Color::BLACK;
      #         }
      #         progress = 0;
      #       }

      #       uint8_t r = max(1, current_color.r / steps);
      #       uint8_t g = max(1, current_color.g / steps);
      #       uint8_t b = max(1, current_color.b / steps);
            
      #       // Let's light up the ones who got their turn.
      #       for (int i = 0; i < speed; i++)
      #       {
      #         Color color = fade ? Color(current_color.r - r, current_color.g - g, current_color.b - b) : Color(r, g, b);

      #         if (twoside)
      #         {
      #           if (progress < middle)
      #           {
      #             if ((revers && progress == middle - 1) || (progress == 0 && !revers))
      #             {
      #               led[middle] = color;
      #             }
      #             led[revers ? max(0, (int) progress) : min((int) (middle + progress + 1), (int) it.size())] = color;
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : max(0, (int) (middle - progress - 1))] = color;
      #           }
      #         }
      #         else
      #         {
      #           if (progress < it.size())
      #           {
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : min((int) progress, (int) it.size())] = color;
      #           }
      #         }

      #         progress++;
      #       }

      #       bool complete = true;

      #       // Increase or Decrease the brightness of those already in action.
      #       for (int i = 0; i < it.size(); i++)
      #       {
      #         if ( !(led[i].r == 0 && led[i].g == 0 && led[i].b == 0) &&
      #             !(led[i].r == current_color.r && led[i].g == current_color.g && led[i].b == current_color.b) )
      #         {
      #           if (fade)
      #           {
      #             led[i].r = max(0, led[i].r - r);
      #             led[i].g = max(0, led[i].g - g);
      #             led[i].b = max(0, led[i].b - b);
      #           }
      #           else
      #           {
      #             led[i].r = min(led[i].r + r, (int) current_color.r);
      #             led[i].g = min(led[i].g + g, (int) current_color.g);
      #             led[i].b = min(led[i].b + b, (int) current_color.b);
      #           }

      #           complete = false;
      #         }
      #       }

      #       // Everyone's already on burn, mission over 
      #       if (complete)
      #       {
      #         if (fade)
      #         {
      #           auto call = id(light1).turn_off();
      #           call.perform();
      #         }
      #         else
      #         {
      #           it.all() = current_color;
      #           auto call = id(light1).turn_on();
      #           call.set_effect("None");
      #           call.perform();
      #         }

      #         ESP_LOGD("effect", "Rise and Fade x%i / %i - Complete", speed, steps);
      #       }
      #       else // Transfer the current state to the led strip
      #       {
      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           it[i] = led[i];
      #         }
      #       }

      # - addressable_lambda:
      #     name: "Rise L2R"
      #     update_interval: 10ms
      #     lambda: |-
      #       static Color led[${num_leds}];
      #       static uint16_t progress = 0;
      #       static int middle = ${num_leds} / 2;

      #       const uint8_t speed = 1;
      #       const uint8_t steps = 100;

      #       const bool revers = true;
      #       const bool twoside = false;
      #       const bool fade = false;

      #       if (initial_run) 
      #       {
      #         ESP_LOGD("effect", "Rise and Fade x%i / %i", speed, steps);

      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           led[i] = fade ? current_color : Color::BLACK;
      #         }
      #         progress = 0;
      #       }

      #       uint8_t r = max(1, current_color.r / steps);
      #       uint8_t g = max(1, current_color.g / steps);
      #       uint8_t b = max(1, current_color.b / steps);
            
      #       // Let's light up the ones who got their turn.
      #       for (int i = 0; i < speed; i++)
      #       {
      #         Color color = fade ? Color(current_color.r - r, current_color.g - g, current_color.b - b) : Color(r, g, b);

      #         if (twoside)
      #         {
      #           if (progress < middle)
      #           {
      #             if ((revers && progress == middle - 1) || (progress == 0 && !revers))
      #             {
      #               led[middle] = color;
      #             }
      #             led[revers ? max(0, (int) progress) : min((int) (middle + progress + 1), (int) it.size())] = color;
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : max(0, (int) (middle - progress - 1))] = color;
      #           }
      #         }
      #         else
      #         {
      #           if (progress < it.size())
      #           {
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : min((int) progress, (int) it.size())] = color;
      #           }
      #         }

      #         progress++;
      #       }

      #       bool complete = true;

      #       // Increase or Decrease the brightness of those already in action.
      #       for (int i = 0; i < it.size(); i++)
      #       {
      #         if ( !(led[i].r == 0 && led[i].g == 0 && led[i].b == 0) &&
      #             !(led[i].r == current_color.r && led[i].g == current_color.g && led[i].b == current_color.b) )
      #         {
      #           if (fade)
      #           {
      #             led[i].r = max(0, led[i].r - r);
      #             led[i].g = max(0, led[i].g - g);
      #             led[i].b = max(0, led[i].b - b);
      #           }
      #           else
      #           {
      #             led[i].r = min(led[i].r + r, (int) current_color.r);
      #             led[i].g = min(led[i].g + g, (int) current_color.g);
      #             led[i].b = min(led[i].b + b, (int) current_color.b);
      #           }

      #           complete = false;
      #         }
      #       }

      #       // Everyone's already on burn, mission over 
      #       if (complete)
      #       {
      #         if (fade)
      #         {
      #           auto call = id(light1).turn_off();
      #           call.perform();
      #         }
      #         else
      #         {
      #           it.all() = current_color;
      #           auto call = id(light1).turn_on();
      #           call.set_effect("None");
      #           call.perform();
      #         }

      #         ESP_LOGD("effect", "Rise and Fade x%i / %i - Complete", speed, steps);
      #       }
      #       else // Transfer the current state to the led strip
      #       {
      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           it[i] = led[i];
      #         }
      #       }

      # - addressable_lambda:
      #     name: "Fase R2L"
      #     update_interval: 10ms
      #     lambda: |-
      #       static Color led[${num_leds}];
      #       static uint16_t progress = 0;
      #       static int middle = ${num_leds} / 2;

      #       const uint8_t speed = 1;
      #       const uint8_t steps = 100;

      #       const bool revers = false;
      #       const bool twoside = false;
      #       const bool fade = true;

      #       if (initial_run) 
      #       {
      #         ESP_LOGD("effect", "Rise and Fade x%i / %i", speed, steps);

      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           led[i] = fade ? current_color : Color::BLACK;
      #         }
      #         progress = 0;
      #       }

      #       uint8_t r = max(1, current_color.r / steps);
      #       uint8_t g = max(1, current_color.g / steps);
      #       uint8_t b = max(1, current_color.b / steps);
            
      #       // Let's light up the ones who got their turn.
      #       for (int i = 0; i < speed; i++)
      #       {
      #         Color color = fade ? Color(current_color.r - r, current_color.g - g, current_color.b - b) : Color(r, g, b);

      #         if (twoside)
      #         {
      #           if (progress < middle)
      #           {
      #             if ((revers && progress == middle - 1) || (progress == 0 && !revers))
      #             {
      #               led[middle] = color;
      #             }
      #             led[revers ? max(0, (int) progress) : min((int) (middle + progress + 1), (int) it.size())] = color;
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : max(0, (int) (middle - progress - 1))] = color;
      #           }
      #         }
      #         else
      #         {
      #           if (progress < it.size())
      #           {
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : min((int) progress, (int) it.size())] = color;
      #           }
      #         }

      #         progress++;
      #       }

      #       bool complete = true;

      #       // Increase or Decrease the brightness of those already in action.
      #       for (int i = 0; i < it.size(); i++)
      #       {
      #         if ( !(led[i].r == 0 && led[i].g == 0 && led[i].b == 0) &&
      #             !(led[i].r == current_color.r && led[i].g == current_color.g && led[i].b == current_color.b) )
      #         {
      #           if (fade)
      #           {
      #             led[i].r = max(0, led[i].r - r);
      #             led[i].g = max(0, led[i].g - g);
      #             led[i].b = max(0, led[i].b - b);
      #           }
      #           else
      #           {
      #             led[i].r = min(led[i].r + r, (int) current_color.r);
      #             led[i].g = min(led[i].g + g, (int) current_color.g);
      #             led[i].b = min(led[i].b + b, (int) current_color.b);
      #           }

      #           complete = false;
      #         }
      #       }

      #       // Everyone's already on burn, mission over 
      #       if (complete)
      #       {
      #         if (fade)
      #         {
      #           auto call = id(light1).turn_off();
      #           call.perform();
      #         }
      #         else
      #         {
      #           it.all() = current_color;
      #           auto call = id(light1).turn_on();
      #           call.set_effect("None");
      #           call.perform();
      #         }

      #         ESP_LOGD("effect", "Rise and Fade x%i / %i - Complete", speed, steps);
      #       }
      #       else // Transfer the current state to the led strip
      #       {
      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           it[i] = led[i];
      #         }
      #       }

      # - addressable_lambda:
      #     name: "Fade L2R"
      #     update_interval: 10ms
      #     lambda: |-
      #       static Color led[${num_leds}];
      #       static uint16_t progress = 0;
      #       static int middle = ${num_leds} / 2;

      #       const uint8_t speed = 1;
      #       const uint8_t steps = 100;

      #       const bool revers = true;
      #       const bool twoside = false;
      #       const bool fade = true;

      #       if (initial_run) 
      #       {
      #         ESP_LOGD("effect", "Rise and Fade x%i / %i", speed, steps);

      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           led[i] = fade ? current_color : Color::BLACK;
      #         }
      #         progress = 0;
      #       }

      #       uint8_t r = max(1, current_color.r / steps);
      #       uint8_t g = max(1, current_color.g / steps);
      #       uint8_t b = max(1, current_color.b / steps);
            
      #       // Let's light up the ones who got their turn.
      #       for (int i = 0; i < speed; i++)
      #       {
      #         Color color = fade ? Color(current_color.r - r, current_color.g - g, current_color.b - b) : Color(r, g, b);

      #         if (twoside)
      #         {
      #           if (progress < middle)
      #           {
      #             if ((revers && progress == middle - 1) || (progress == 0 && !revers))
      #             {
      #               led[middle] = color;
      #             }
      #             led[revers ? max(0, (int) progress) : min((int) (middle + progress + 1), (int) it.size())] = color;
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : max(0, (int) (middle - progress - 1))] = color;
      #           }
      #         }
      #         else
      #         {
      #           if (progress < it.size())
      #           {
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : min((int) progress, (int) it.size())] = color;
      #           }
      #         }

      #         progress++;
      #       }

      #       bool complete = true;

      #       // Increase or Decrease the brightness of those already in action.
      #       for (int i = 0; i < it.size(); i++)
      #       {
      #         if ( !(led[i].r == 0 && led[i].g == 0 && led[i].b == 0) &&
      #             !(led[i].r == current_color.r && led[i].g == current_color.g && led[i].b == current_color.b) )
      #         {
      #           if (fade)
      #           {
      #             led[i].r = max(0, led[i].r - r);
      #             led[i].g = max(0, led[i].g - g);
      #             led[i].b = max(0, led[i].b - b);
      #           }
      #           else
      #           {
      #             led[i].r = min(led[i].r + r, (int) current_color.r);
      #             led[i].g = min(led[i].g + g, (int) current_color.g);
      #             led[i].b = min(led[i].b + b, (int) current_color.b);
      #           }

      #           complete = false;
      #         }
      #       }

      #       // Everyone's already on burn, mission over 
      #       if (complete)
      #       {
      #         if (fade)
      #         {
      #           auto call = id(light1).turn_off();
      #           call.perform();
      #         }
      #         else
      #         {
      #           it.all() = current_color;
      #           auto call = id(light1).turn_on();
      #           call.set_effect("None");
      #           call.perform();
      #         }

      #         ESP_LOGD("effect", "Rise and Fade x%i / %i - Complete", speed, steps);
      #       }
      #       else // Transfer the current state to the led strip
      #       {
      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           it[i] = led[i];
      #         }
      #       }

      # - addressable_lambda:
      #     name: "Rise Double"
      #     update_interval: 10ms
      #     lambda: |-
      #       static Color led[${num_leds}];
      #       static uint16_t progress = 0;
      #       static int middle = ${num_leds} / 2;

      #       const uint8_t speed = 1;
      #       const uint8_t steps = 100;

      #       const bool revers = true;
      #       const bool twoside = true;
      #       const bool fade = false;

      #       if (initial_run) 
      #       {
      #         ESP_LOGD("effect", "Rise and Fade x%i / %i", speed, steps);

      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           led[i] = fade ? current_color : Color::BLACK;
      #         }
      #         progress = 0;
      #       }

      #       uint8_t r = max(1, current_color.r / steps);
      #       uint8_t g = max(1, current_color.g / steps);
      #       uint8_t b = max(1, current_color.b / steps);
            
      #       // Let's light up the ones who got their turn.
      #       for (int i = 0; i < speed; i++)
      #       {
      #         Color color = fade ? Color(current_color.r - r, current_color.g - g, current_color.b - b) : Color(r, g, b);

      #         if (twoside)
      #         {
      #           if (progress < middle)
      #           {
      #             if ((revers && progress == middle - 1) || (progress == 0 && !revers))
      #             {
      #               led[middle] = color;
      #             }
      #             led[revers ? max(0, (int) progress) : min((int) (middle + progress + 1), (int) it.size())] = color;
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : max(0, (int) (middle - progress - 1))] = color;
      #           }
      #         }
      #         else
      #         {
      #           if (progress < it.size())
      #           {
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : min((int) progress, (int) it.size())] = color;
      #           }
      #         }

      #         progress++;
      #       }

      #       bool complete = true;

      #       // Increase or Decrease the brightness of those already in action.
      #       for (int i = 0; i < it.size(); i++)
      #       {
      #         if ( !(led[i].r == 0 && led[i].g == 0 && led[i].b == 0) &&
      #             !(led[i].r == current_color.r && led[i].g == current_color.g && led[i].b == current_color.b) )
      #         {
      #           if (fade)
      #           {
      #             led[i].r = max(0, led[i].r - r);
      #             led[i].g = max(0, led[i].g - g);
      #             led[i].b = max(0, led[i].b - b);
      #           }
      #           else
      #           {
      #             led[i].r = min(led[i].r + r, (int) current_color.r);
      #             led[i].g = min(led[i].g + g, (int) current_color.g);
      #             led[i].b = min(led[i].b + b, (int) current_color.b);
      #           }

      #           complete = false;
      #         }
      #       }

      #       // Everyone's already on burn, mission over 
      #       if (complete)
      #       {
      #         if (fade)
      #         {
      #           auto call = id(light1).turn_off();
      #           call.perform();
      #         }
      #         else
      #         {
      #           it.all() = current_color;
      #           auto call = id(light1).turn_on();
      #           call.set_effect("None");
      #           call.perform();
      #         }

      #         ESP_LOGD("effect", "Rise and Fade x%i / %i - Complete", speed, steps);
      #       }
      #       else // Transfer the current state to the led strip
      #       {
      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           it[i] = led[i];
      #         }
      #       }

      # - addressable_lambda:
      #     name: "Fade Double"
      #     update_interval: 10ms
      #     lambda: |-
      #       static Color led[${num_leds}];
      #       static uint16_t progress = 0;
      #       static int middle = ${num_leds} / 2;

      #       const uint8_t speed = 1;
      #       const uint8_t steps = 100;

      #       const bool revers = false;
      #       const bool twoside = true;
      #       const bool fade = true;

      #       if (initial_run) 
      #       {
      #         ESP_LOGD("effect", "Rise and Fade x%i / %i", speed, steps);

      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           led[i] = fade ? current_color : Color::BLACK;
      #         }
      #         progress = 0;
      #       }

      #       uint8_t r = max(1, current_color.r / steps);
      #       uint8_t g = max(1, current_color.g / steps);
      #       uint8_t b = max(1, current_color.b / steps);
            
      #       // Let's light up the ones who got their turn.
      #       for (int i = 0; i < speed; i++)
      #       {
      #         Color color = fade ? Color(current_color.r - r, current_color.g - g, current_color.b - b) : Color(r, g, b);

      #         if (twoside)
      #         {
      #           if (progress < middle)
      #           {
      #             if ((revers && progress == middle - 1) || (progress == 0 && !revers))
      #             {
      #               led[middle] = color;
      #             }
      #             led[revers ? max(0, (int) progress) : min((int) (middle + progress + 1), (int) it.size())] = color;
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : max(0, (int) (middle - progress - 1))] = color;
      #           }
      #         }
      #         else
      #         {
      #           if (progress < it.size())
      #           {
      #             led[revers ? max(0, (int) (it.size() - progress - 1)) : min((int) progress, (int) it.size())] = color;
      #           }
      #         }

      #         progress++;
      #       }

      #       bool complete = true;

      #       // Increase or Decrease the brightness of those already in action.
      #       for (int i = 0; i < it.size(); i++)
      #       {
      #         if ( !(led[i].r == 0 && led[i].g == 0 && led[i].b == 0) &&
      #             !(led[i].r == current_color.r && led[i].g == current_color.g && led[i].b == current_color.b) )
      #         {
      #           if (fade)
      #           {
      #             led[i].r = max(0, led[i].r - r);
      #             led[i].g = max(0, led[i].g - g);
      #             led[i].b = max(0, led[i].b - b);
      #           }
      #           else
      #           {
      #             led[i].r = min(led[i].r + r, (int) current_color.r);
      #             led[i].g = min(led[i].g + g, (int) current_color.g);
      #             led[i].b = min(led[i].b + b, (int) current_color.b);
      #           }

      #           complete = false;
      #         }
      #       }

      #       // Everyone's already on burn, mission over 
      #       if (complete)
      #       {
      #         if (fade)
      #         {
      #           auto call = id(light1).turn_off();
      #           call.perform();
      #         }
      #         else
      #         {
      #           it.all() = current_color;
      #           auto call = id(light1).turn_on();
      #           call.set_effect("None");
      #           call.perform();
      #         }

      #         ESP_LOGD("effect", "Rise and Fade x%i / %i - Complete", speed, steps);
      #       }
      #       else // Transfer the current state to the led strip
      #       {
      #         for (int i = 0; i < it.size(); i++)
      #         {
      #           it[i] = led[i];
      #         }
      #       }

  - platform: partition
    name: "Indicator T"
    id: light1_indicator_t
    segments:
      - id: light1
        from: 150
        to: 156

  - platform: partition
    name: "Toilet"
    id: light1_toilet
    segments:
      - id: light1
        from: 157
        to: 173
    effects:
      - addressable_color_wipe:
      - automation:
          name: "Occupied"
          sequence:
            - light.turn_on:
                id: light1_toilet
                brightness: 50%
                transition_length: 3s
                red: 0%
                green: 100%
                blue: 0%
            - delay: 2s
            - light.turn_on:
                id: light1_toilet
                brightness: 20%
                transition_length: 2s
                red: 0%
                green: 100%
                blue: 0%
            - delay: 2s
      - automation:
          name: "Red_Alarm"
          sequence:
            - light.addressable_set:
                id: light1_toilet
                color_brightness: 100%
                red: 100%
                green: 0%
                blue: 0%
            - delay: 1s
            - light.addressable_set:
                id: light1_toilet
                color_brightness: 10%
                red: 100%
                green: 0%
                blue: 0%
            - delay: 1s
      - automation:
          name: "Green_Alarm"
          sequence:
            - light.addressable_set:
                id: light1_toilet
                color_brightness: 100%
                red: 0%
                green: 100%
                blue: 0%
            - delay: 1s
            - light.addressable_set:
                id: light1_toilet
                color_brightness: 20%
                red: 0%
                green: 100%
                blue: 0%
            - delay: 1s

  - platform: partition
    name: "Indicator B"
    id: light1_indicator_b
    segments:
      - id: light1
        from: 94
        to: 100

  - platform: partition
    name: "Bathroom"
    id: light1_bathroom
    segments:
      - id: light1
        from: 99
        to: 117
    effects:
      - addressable_color_wipe:
      - automation:
          name: "Occupied"
          sequence:
            - light.turn_on:
                id: light1_bathroom
                brightness: 50%
                transition_length: 3s
                red: 0%
                green: 0%
                blue: 100%
            - delay: 2s
            - light.turn_on:
                id: light1_bathroom
                brightness: 20%
                transition_length: 2s
                red: 0%
                green: 0%
                blue: 100%
            - delay: 2s
      - automation:
          name: "Red_Alarm"
          sequence:
            - light.addressable_set:
                id: light1_bathroom
                color_brightness: 100%
                red: 100%
                green: 0%
                blue: 0%
            - delay: 1s
            - light.addressable_set:
                id: light1_bathroom
                color_brightness: 10%
                red: 100%
                green: 0%
                blue: 0%
            - delay: 1s
      - automation:
          name: "Green_Alarm"
          sequence:
            - light.addressable_set:
                id: light1_bathroom
                color_brightness: 100%
                red: 0%
                green: 100%
                blue: 0%
            - delay: 1s
            - light.addressable_set:
                id: light1_bathroom
                color_brightness: 5%
                red: 0%
                green: 100%
                blue: 0%
            - delay: 1s

  - platform: partition
    name: "Washer"
    id: light1_washer
    segments:
      - id: light1
        from: 86
        to: 93
    effects:
      - addressable_color_wipe:
      - automation:
          name: "Occupied"
          sequence:
            - light.turn_on:
                id: light1_washer
                brightness: 50%
                transition_length: 3s
                red: 0%
                green: 0%
                blue: 100%
            - delay: 2s
            - light.turn_on:
                id: light1_washer
                brightness: 20%
                transition_length: 2s
                red: 0%
                green: 0%
                blue: 100%
            - delay: 2s
      - automation:
          name: "Red_Alarm"
          sequence:
            - light.addressable_set:
                id: light1_washer
                color_brightness: 100%
                red: 100%
                green: 0%
                blue: 0%
            - light.addressable_set:
                id: light1_washer
                color_brightness: 10%
                red: 100%
                green: 0%
                blue: 0%
      - automation:
          name: "Washing"
          sequence:
            - light.turn_on:
                id: light1_washer
                color_brightness: 100%
                red: 100%
                green: 100%
                blue: 0%
                transition_length: 3s
            - delay: 1s
            - light.turn_on:
                id: light1_washer
                color_brightness: 10%
                red: 100%
                green: 100%
                blue: 00%
                transition_length: 5s
            - delay: 2s
      - automation:
          name: "Drying"
          sequence:
            - light.turn_on:
                id: light1_washer
                color_brightness: 100%
                red: 0%
                green: 0%
                blue: 100%
                transition_length: 3s
            - delay: 1s
            - light.turn_on:
                id: light1_washer
                color_brightness: 10%
                red: 10%
                green: 10%
                blue: 100%
                transition_length: 5s
            - delay: 2s
      - automation:
          name: "Error"
          sequence:
            - light.turn_on:
                id: light1_washer
                color_brightness: 100%
                red: 0%
                green: 100%
                blue: 0%
                transition_length: 2s
            - delay: 1s
            - light.turn_on:
                id: light1_washer
                color_brightness: 10%
                red: 100%
                green: 100%
                blue: 0%
                transition_length: 3s
            - delay: 1s
      - automation:
          name: "Green_Alarm"
          sequence:
            - light.addressable_set:
                id: light1_washer
                color_brightness: 100%
                red: 0%
                green: 100%
                blue: 0%
            - delay: 1s
            - light.addressable_set:
                id: light1_washer
                color_brightness: 5%
                red: 0%
                green: 100%
                blue: 0%
            - delay: 1s

text_sensor:
  - platform: template
    name: "Uptime"
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: "IP"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "MAC"
    # scan_results:
    #   name: "Latest Scan Results"

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true
    
sensor:
  - platform: uptime
    name: "Uptime s"
    id: uptime_sensor
    update_interval: 15s
    disabled_by_default: true
    
  - platform: bme280_i2c
    temperature:
      name: "Temperature"
      oversampling: 16x
      id: bme280_temperature
    pressure:
      name: "Pressure"
      id: bme280_pressure
    humidity:
      name: "Humidity"
      id: bme280_humidity
    address: 0x76
    update_interval: 30s

  # - platform: bh1750
  #   name: "Illuminance"
  #   address: 0x23
  #   #measurement_duration: 254
  #   update_interval: 15s
  #   accuracy_decimals: 0
    
  - platform: wifi_signal
    name: "WiFi RSSI"
    update_interval: 60s

button:
  - platform: restart
    name: "Restart"

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow