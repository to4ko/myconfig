substitutions:
  board_name: esp8266_hood_k
  node_name: esp8266-hood-k

esphome:
  name: ${node_name}
  comment: "ESP8266 Dual Relay TCouple K"
  friendly_name: "ESP8266 Hood K"
  area: "Kitchen"    

safe_mode:
  disabled: False
  num_attempts: 5
  reboot_timeout: 15min

esp8266:
  board: esp01_1m
  restore_from_flash: true

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_pass
  domain: !secret my_domain
  reboot_timeout: 10min
  #output_power: 17.5dB
  #fast_connect: true
  #power_save_mode: none
  # networks:
  #   - ssid: !secret wifi_ssid_k
  #     password: !secret wifi_pass
  #     hidden: true
  #     bssid: !secret wifi_bssid_hs_iot
  #     priority: 2
  #   - ssid: !secret wifi_ssid
  #     password: !secret wifi_pass
  #     hidden: false
  #     bssid: !secret wifi_bssid_hs_main
  #     priority: 1
  #   - ssid: !secret wifi_ssid
  #     password: !secret wifi_pass
  #     hidden: false
  #     priority: 0
  # manual_ip:
  #   static_ip: 192.168.1.65
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8
    
logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:
  - platform: esphome

web_server:
  port: 80

# output:
#   - platform: esp8266_pwm
#     id: blue_led
#     pin: GPIO13
#     inverted: True

# light:
#   - platform: binary
#     name: "Status"LED
#     #internal: true
#     output: blue_led
#     id: main_led
output:
  - platform: gpio
    id: fan_output
    pin: GPIO04

  - platform: gpio
    id: light_output
    pin: GPIO05

  - platform: gpio
    id: light_output_button_led
    pin: GPIO16

light:
  - platform: binary
    name: "Main"
    output: light_output
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:car-light-fog
    id: light_1

  - platform: binary
    name: "Button LED"
    output: light_output_button_led
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:led-off
    id: light_2

fan:
  - platform: binary
    output: fan_output
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Fan"
    id: fan_1

spi:
  - id: spi_hood
    clk_pin: GPIO14
    miso_pin: GPIO12

binary_sensor:
  - platform: status
    name: "Status"
    id: id_status

  - platform: template
    name: "Stove State"
    lambda: |-
      if ( 
      (id(hood_temp).state > id(median_temp).state) ) {
        return true;
      } else {
        return false;
      }
    device_class: heat
    filters:
      - delayed_off: 5min
      - delayed_on: 30s
    on_press:
      then:
        - if:
            condition:
              and:
                - binary_sensor.is_on: id_status
            then:
              - fan.turn_on: fan_1

    on_release:
      then:
        - fan.turn_off: fan_1       

  - platform: gpio
    name: "Fan Button"
    pin: 
      number: GPIO03
      mode: INPUT_PULLUP
      inverted: true
    id: sw1
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - fan.toggle: fan_1
    # on_click:
    #   min_length: 50ms
    #   max_length: 350ms
    #   then:
    #     - switch.toggle: relay2
    
  - platform: gpio
    name: "Light Button"
    pin: 
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: true
    id: sw2   
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - light.toggle: light_1
    # on_click:
    #   min_length: 50ms
    #   max_length: 350ms
    #   then:
    #     - switch.toggle: relay1
    
    on_multi_click:
      - timing:
          - ON for at least 0.75s
        then:
          - logger.log: "---------> Long press"
          - light.toggle: light_2

switch:
  # - platform: gpio
  #   name: "${board_name}_Light"
  #   pin: GPIO05
  #   id: relay1
  #   restore_mode: RESTORE_DEFAULT_OFF
  #   icon: mdi:car-light-fog

  # - platform: gpio
  #   name: "${board_name}_Fan"
  #   pin: 
  #     number: GPIO04
  #     allow_other_uses: true
  #   id: relay2
  #   restore_mode: RESTORE_DEFAULT_OFF
  #   icon: mdi:fan

  # - platform: gpio
  #   name: "${board_name}_Button_LED"
  #   pin: GPIO16
  #   restore_mode: RESTORE_DEFAULT_OFF
  #   icon: mdi:led-off
  #   id: button_led

button:
  - platform: restart
    name: "Restart"

sensor:
  - platform: uptime
    name: "Uptime s"
    id: uptime_sensor
    disabled_by_default: true

  - platform: wifi_signal
    name: "WiFi RSSI"
    update_interval: 60s

  - platform: max6675
    name: "TCouple"
    cs_pin: GPIO15
    update_interval: 15s
    id: hood_temp
    spi_id: spi_hood

  - platform: homeassistant
    name: "Median HA"
    entity_id: sensor.stove_temperature_median
    id: median_temp
    internal: false
    filters:
      - lambda: |-
          if (id(id_status).state && x > 20 && x < 40) {
            return x+5;
          } else {
            return 32;
          }
    unit_of_measurement: 'Â°C'
    device_class: temperature
    state_class: measurement
  
text_sensor:
  - platform: template
    name: "Uptime"
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: "IP"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "MAC"
    # scan_results:
    #   name: "Latest Scan Results"

  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

  - platform: homeassistant
    name: "Median HA Text"
    entity_id: sensor.stove_temperature_median
    internal: false
    
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow